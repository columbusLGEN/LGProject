//
//  AvaLinkCall.swift
//  Chapter2
//
//  Created by Peanut Lee on 2018/2/5.
//  Copyright © 2018年 LG. All rights reserved.
//

import Foundation

class AvaLinkCall: ViewController {
    
    override func viewDidLoad() {
        
        /// 1.可选链式调用
        /// * 可选链式调用 与 强制解包（！）很像，它们的区别是：当可选值为空时可选链式调用只会调用失败，而强制解包会出发运行时崩溃
        /// * 反回nil值说明调用失败
        
        /// 2.为可选链式调用定义模型类
        
        /// 3.通过可选链式调用访问属性
        
        /// 4.通过可选链式调用方法
        /// * 通过可选链式条用返回值都是可选的
        
        /// 5.通过可选链式调用访问下标
        /// * 把?放在[]前面而不是后面: ?[0]
        
        /// 6.连接多层可选链式调用
        /// * 多层可选链式调用不会增加返回值的可选层级: 例如通过可选链式调用访问一个Int值，将会返回Int? ，无论使用了多少层
        
        /// 7.在方法的返回值上进行可选链式调用
        /// funcName()? 在方法的括号后面加问号表示要在 函数的可选返回值上进行可选链式调用，而不是方法本身
        
        /// ------------------------------错误处理------------------------------
        /// 1.表示抛出错误
        /// * 枚举尤为适合构建一组相关的错误状态，枚举的关联值还可以提供错误状态额外信息
        
        /// 2.处理错误
        /// Swift 有4种处理错误的方式
            /// - do-catch语句
            /// - 可选 （将错误作为可选类型处理）
            /// - 断言 （断言此错误不会发生）
            /// - try try! try? （在调用能抛出错误的函数之前加关键字 try）
        /// Swift 的错误处理不设计解除调用栈（这是一个代价高昂的过程），throw 语句的性能特性可以与return语句相媲美
        
        /**
            func throwErrorFunc() throws -> Int
            func throwErrorFunc() -> Int
         用throws 修饰的函数被称作 trhowing 函数, 一个throwing 函数可以在内部抛出错误，并将错误传递到函数被调用的错用域
         */
        
        /// 3.指定清理操作
        /// * defer 语句
        /// defer语句在即将离开当前代码块时执行一些列语句
        /// 可以使用defer 语句来确保文件描述得已关闭，以及手动分配的内存得以释放
        /// 先defer 后执行
        
        /// ------------------------------类型转换------------------------------
        /// is as
        /// 1.定义一个类层次作为例子
        
        /// 2.检查类型
        /// is
        
        /// 3.向下转型
        /// as? 或 as!
        /// * 转换没有真的改变实例或它的值。根本的实例保持不变，只是简单的作为它被转换成的类型来使用
        
        /// 4.Any 和 AnyObject 的类型转化
        
        
    }
    
    
}
