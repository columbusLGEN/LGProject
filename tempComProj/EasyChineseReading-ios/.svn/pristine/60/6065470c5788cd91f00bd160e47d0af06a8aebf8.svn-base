//
//  ECRBookRackController.m
//  EasyChineseReading-ios
//
//  Created by lee on 2017/9/5.
//  Copyright © 2017年 lee. All rights reserved.
//

#define ECRBookrackcell @"ECRBookrackCollectionViewCell"

#import "ECRBookRackController.h"
#import "ECRBookrackView.h"
#import "ECRBookrackModel.h"
#import "ECRBookrackCollectionViewCell.h"
#import "ECRBookrackFlowLayout.h"
#import "ECRBookrackModel.h"
#import "ECRFloderView.h"
#import "ECRBookFloderLayout.h"
#import "ECRDBReadViewController.h"
#import "ECRBookInfoViewController.h"
#import "ECREpubReader.h"// epub read
#import <YMEpubReaderKit/YMEpubReaderKit.h>
#import "ReaderViewController.h"// pdf read
#import "ECRBookrackNavMenuView.h"
#import "ECRBookrackEditBottom.h"
#import "ECRBrebAlertView.h"

@interface ECRBookRackController ()<
ECRBookrackViewDelegate,
UICollectionViewDelegate,
UICollectionViewDataSource,
ECRBookrackFlowLayoutSwitchStateDelegate,
LXReorderableCollectionViewDataSource,
LXReorderableCollectionViewDelegateFlowLayout,
ECRFloderViewDelegate,
ECRBookrackNavMenuViewDelegate,
ReaderViewControllerDelegate,
ECRBookrackEditBottomDelegate,
ECRBrebAlertViewDelegate
>

@property (strong,nonatomic) ECRBookrackNavMenuView *menu;//
@property (copy,nonatomic) void(^editDoneBlock)();
@property (strong,nonatomic) ECRBookrackEditBottom *breBottom;
@property (strong,nonatomic) ECRBrebAlertView *deboAlert;// <##>

@property (strong,nonatomic) ECRBookrackView *mainView;
@property (strong,nonatomic) ECRFloderView *floderView;
@property (strong,nonatomic) NSArray<ECRBookrackModel *> *allBookModels;
@property (strong,nonatomic) NSMutableArray<ECRBookrackModel *> *bookrackModels;// 已购买模型数组

@property (strong,nonatomic) ReaderViewController *pdfReader;//
@property (strong,nonatomic) NSArray *pdfBookPaths;//

// test
@property (assign,nonatomic) BOOL canReadEpub;//

@end

@implementation ECRBookRackController

#pragma mark - ReaderViewControllerDelegate
- (void)dismissReaderViewController:(ReaderViewController *)viewController{
    [self.pdfReader dismissViewControllerAnimated:YES completion:^{
        // MARK: 退出PDF阅读时
        
    }];
}

#pragma mark - ECRFloderViewDelegate
- (void)floderViewClose:(ECRFloderView *)floderView{
    [self.navigationController setNavigationBarHidden:NO animated:NO];
    if (self.floderView != nil) {
        [self.floderView removeFromSuperview];
        self.floderView = nil;
    }
}
// 文件夹中点击完成, 退出编辑状态
- (void)floderViewEndEdit:(ECRFloderView *)floderView{
    [self editDone];
}

#pragma mark - ECRBookrackViewDelegate 
// MARK: 点击书本或者文件夹
- (void)brView:(ECRBookrackView *)brViiew didSelectBookrack:(UICollectionView *)collectionView indexPath:(NSIndexPath *)indexPath{
    
    // 全部图书列表,进入详情页面
    if ([collectionView isEqual:_mainView.allOfBooks]) {
        if (indexPath.item < 3) {
            //MARK: DB
            ECRDBReadViewController *read = [[ECRDBReadViewController alloc] init];
            read.viewControllerPushWay = ECRBaseControllerPushWayPush;
            [self.navigationController pushViewController:read animated:YES];
        }else if(indexPath.item < 6){
            // MARK: EPUB
            if (indexPath.item == 3) {
                // MARK: 加载本地epub书籍
                [[ECREpubReader sharedEpubReader] loadBookList];
                self.canReadEpub = YES;
            }else{
                if (self.canReadEpub) {
                    [[ECREpubReader sharedEpubReader] getTestBooks:^(NSArray<MyBook *> *books, NSString *info) {
                        NSLog(@"books -- %@",books);
                        MyBook *epub = books[indexPath.item - 4];
                        [[ECREpubReader sharedEpubReader] readBook:epub fromController:self];
                    }];
                }else{
                    [self.view presentMessageTips:@"请先点击\"营销_3\""];
                }
            }
            
        }else{
            // MARK: PDF
            [self presentViewController:self.pdfReader animated:YES completion:nil];
        }

    }else{
        // 已购买列表点击事件
        ECRBookrackModel *model = self.bookrackModels[indexPath.item];
        if (model.groupId == 0) {
            
            
        }else{
            // 隐藏导航栏
            [self.navigationController setNavigationBarHidden:YES animated:NO];
            // 打开文件夹
            ECRBookFloderLayout *brLayout = [[ECRBookFloderLayout alloc] init];
            brLayout.flssDelegate = self;
            _floderView = [[ECRFloderView alloc] initWithFrame:CGRectZero flowLayout:brLayout];
            _floderView.delegate = self;
            [self.view addSubview:_floderView];
            _floderView.fileName = model.name;
            _floderView.bookModels = model.books;
            _floderView.collectionView.dataSource = self;
            _floderView.collectionView.delegate = self;
            
            [_floderView mas_makeConstraints:^(MASConstraintMaker *make) {
                make.edges.equalTo(self.view);
            }];
        }
    }
}

#pragma mark - ECRBookrackFlowLayoutSwitchStateDelegate
- (void)brflayout:(ECRBookrackFlowLayout *)flowLayout beginEditWithModel:(ECRBookrackModel *)model doneBlock:(void (^)())doneBlock {
    // 隐藏 tabbar
    [self rg_setTabbarHidden:YES];
    [self setNavRightItemsWithState:NO];
    self.editDoneBlock = doneBlock;
    if (model.groupId == 0) {// 单本书
        // 将该模型 切换为选中状态
        
        // 更换导航栏右边 item
    }else{// 文件夹
        // 不操作
    }
}

#pragma mark LXReorderableCollectionViewDataSource
- (void)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath didMoveToIndexPath:(NSIndexPath *)toIndexPath{
    // 完成移动时执行
    
}

- (void)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath willMoveToIndexPath:(NSIndexPath *)toIndexPath{
    if ([collectionView isEqual:_mainView.bookrack]) {
        
        ECRBookrackModel *fromModel = _bookrackModels[fromIndexPath.item];
        [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
        [_bookrackModels insertObject:fromModel atIndex:toIndexPath.item];
    }else{
        ECRBookrackModel *fromModel = _floderView.bookModels[fromIndexPath.item];
        [_floderView.bookModels removeObjectAtIndex:fromIndexPath.item];
        [_floderView.bookModels insertObject:fromModel atIndex:toIndexPath.item];
    }
    
}
// lee
- (void)collectionView:(UICollectionView *)collectionView deleteItemAndModelAtIndexPath:(NSIndexPath *)fromIndexPath insertModel:(ECRBookrackModel *)model toIndexPath:(NSIndexPath *)toIndexPath{
    
    if (model == nil) {// 如果model为nil, 那么toIndex的模型为文件夹类型
        [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
    }else{
        if (fromIndexPath.item < toIndexPath.item) {// 从前往后添加
                [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
                [_bookrackModels removeObjectAtIndex:(toIndexPath.item - 1)];
                [_bookrackModels insertObject:model atIndex:(toIndexPath.item - 1)];
        }else{// 从后往前添加

            [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
            [_bookrackModels removeObjectAtIndex:toIndexPath.item];
            [_bookrackModels insertObject:model atIndex:toIndexPath.item];
//            NSLog(@"文件夹index%ld",toIndexPath.item);
        }
    }
    
}

- (BOOL)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath canMoveToIndexPath:(NSIndexPath *)toIndexPath{
    return YES;
}

- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{
    return YES;
}

#pragma mark - UICollectionViewDataSource
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    if ([collectionView isEqual:_mainView.bookrack]) {
        return _bookrackModels.count;
    }
    if ([collectionView isEqual:_floderView.collectionView]) {
        return _floderView.bookModels.count;
    }
    if ([collectionView isEqual:_mainView.allOfBooks]) {
        return _allBookModels.count;
    }
    return 0;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    // 待优化
    if ([collectionView isEqual:_mainView.bookrack]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];
        cell.inx  = indexPath;
        if (self.bookrackModels.count == 0) {
        }else{
            model = self.bookrackModels[indexPath.item];
            cell.model = model;
        }
        return cell;
    }
    if ([collectionView isEqual:_floderView.collectionView]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];
        cell.inx  = indexPath;
        if (self.floderView.bookModels.count == 0) {
        }else{
            model = self.floderView.bookModels[indexPath.item];
            cell.model = model;
        }
        return cell;
    }
    if ([collectionView isEqual:_mainView.allOfBooks]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];
        cell.inx  = indexPath;
        if (self.bookrackModels.count == 0) {
        }else{
            model = self.allBookModels[indexPath.item];
            cell.model = model;
        }
        return cell;
    }
    return nil;
}
#pragma mark - UICollectionViewDelegateFlowLayout
// 定义每个Section的四边间距
- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section{
    if ([collectionView isEqual:_floderView.collectionView]) {
        return UIEdgeInsetsMake(10, 0, 10, 0);//分别为上、左、下、右
    }
    return UIEdgeInsetsZero;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupUI];
    [self loadNewData];
    
}

- (void)loadNewData{
    // TEST - CODE FOR DATA
    NSString *testURL0 = @"https://images-cn.ssl-images-amazon.com/images/I/51VNBGrPxVL._SX353_BO1,204,203,200_.jpg";
    NSString *testURL1 = @"http://pic13.photophoto.cn/20091109/0005018327183438_b.jpg";
    NSInteger count = 9;//arc4random_uniform(10) + 6;
    NSMutableArray *arrM = [NSMutableArray arrayWithCapacity:10];
    for (NSInteger i = 0; i < count; ++i) {
        ECRBookrackModel *model = [[ECRBookrackModel alloc] init];
        model.name = [NSString stringWithFormat:@"营销_%ld",i];
        model.bookType = i;
//        NSLog(@"bookType: --%ld",model.bookType);
        model.groupId = 0;
        model.bookPic = testURL0;
        if (i == 0 || i == 5) {
            NSMutableArray *arr2 = [NSMutableArray arrayWithCapacity:10];
            for (NSInteger i = 0; i < 9; ++i) {
                ECRBookrackModel *modelBook = [[ECRBookrackModel alloc] init];
                modelBook.bookPic = testURL1;
                modelBook.name = @"Java从入门到放弃";
                [arr2 addObject:modelBook];
            }
            model.books = arr2;
            model.groupId = 1;
            model.name = [NSString stringWithFormat:@"文件夹%ld",i];
        }
        [arrM addObject:model];
    }
    
    self.allBookModels = arrM.copy;// 全部图书
    [self.mainView.allOfBooks reloadData];
    [self.mainView.allOfBooks setContentOffset:CGPointMake(0, 0)];
    self.bookrackModels = arrM;// 已购买
    [self.mainView.bookrack reloadData];
    
    
    // 加载PDF书籍路径
    NSString *pdfBundlePath = [[NSBundle mainBundle] pathForResource:@"PDFBooks" ofType:@"bundle"];
    NSMutableArray *pdfPaths = [NSMutableArray arrayWithCapacity:10];
    for (NSInteger i = 0; i < 4; ++i) {
        NSString *bookName = [NSString stringWithFormat:@"pdf%ld.pdf",i];
        NSString *pdfBookPath = [pdfBundlePath stringByAppendingPathComponent:bookName];
        [pdfPaths addObject:pdfBookPath];
    }
    self.pdfBookPaths = pdfPaths.copy;
    self.pdfReader;
}



- (void)setupUI{
    ECRBookrackFlowLayout *brLayout = [[ECRBookrackFlowLayout alloc] init];
    brLayout.flssDelegate =  self;
    _mainView          = [[ECRBookrackView alloc]
                          initWithFrame:self.view.bounds flowLayout:brLayout];
    _mainView.delegate = self;
    _mainView.bookrack.dataSource = self;
    _mainView.allOfBooks.dataSource = self;
//    _mainView.allOfBooks.delegate = self;
//    _mainView.bookrack.delegate = self;
    self.view          = _mainView;
    
    // 设置导航栏右箭头
    [self setNavRightItemsWithState:YES];
    
}
- (void)setNavRightItemsWithState:(BOOL)normal{
    if (normal) {
        UIBarButtonItem *menuItem = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"book5"] style:UIBarButtonItemStylePlain target:self action:@selector(menuDropDown)];
        UIBarButtonItem *test = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"book4"] style:UIBarButtonItemStylePlain target:self action:@selector(bookrackSearch)];
        
        self.navigationItem.leftBarButtonItem = nil;
        self.navigationItem.rightBarButtonItems = @[menuItem,test];
    }else{
        if (self.navigationItem.rightBarButtonItems.count == 2) {
            self.navigationItem.rightBarButtonItems = nil;
            UIBarButtonItem *allSelectItem = [[UIBarButtonItem alloc] initWithTitle:@"全选" style:UIBarButtonItemStylePlain target:self action:@selector(allSelected)];
            self.navigationItem.leftBarButtonItem = allSelectItem;
            UIBarButtonItem *doneItem = [[UIBarButtonItem alloc] initWithTitle:@"完成" style:UIBarButtonItemStylePlain target:self action:@selector(editDone)];
            self.navigationItem.rightBarButtonItem = doneItem;
        }
    }
}
- (void)menuDropDown{// 展开下拉菜单
    if (self.menu == nil) {
        ECRBookrackNavMenuView *menu = [ECRBookrackNavMenuView bookrackNavMenuView];
        menu.delegate = self;
        menu.backgroundColor = [UIColor clearColor];
        menu.frame = CGRectMake(0, 0, Screen_Width, Screen_Height);
        [[UIApplication sharedApplication].keyWindow addSubview:menu];
        self.menu = menu;
    }
}
#pragma mark - 
- (void)closeBrnmView:(ECRBookrackNavMenuView *)view{
    [self.menu removeFromSuperview];
    self.menu = nil;
}
- (void)brnmView:(ECRBookrackNavMenuView *)view tb:(BOOL)tb{
    if (tb == 0) {
        NSLog(@"导入图书");
    }else{
        NSLog(@"时间排序");
    }
    [self.menu removeFromSuperview];
    self.menu = nil;
}
- (void)bookrackSearch{
    // 搜索
}
- (void)editDone{
    // 结束编辑
    // 显示tabbar
    if (self.deboAlert != nil) {
        [self.deboAlert removeFromSuperview];
        self.deboAlert = nil;
    }
    [self rg_setTabbarHidden:NO];
    [self setNavRightItemsWithState:YES];
    // 回调,告诉flow layout 结束 编辑
    if (self.editDoneBlock) {
        self.editDoneBlock();
    }
}
// 显示，或者隐藏tabbar
- (void)rg_setTabbarHidden:(BOOL)isHidden{// YES:隐藏，NO 显示
    [self.tabBarController.tabBar setHidden:isHidden];
    // 添加/删除 底部view
    if (isHidden) {
        // 添加
        self.breBottom = [[ECRBookrackEditBottom alloc] initWithFrame:CGRectMake(0, Screen_Height - 49, Screen_Width, 49)];
        self.breBottom.delegate = self;
        [[UIApplication sharedApplication].keyWindow addSubview:self.breBottom];
    }else{
        // 删除
        [self.breBottom removeFromSuperview];
        self.breBottom = nil;
    }
}
#pragma mark - ECRBookrackEditBottomDelegate
- (void)brebDeleteClick:(ECRBookrackEditBottom *)view{
//    NSLog(@"delete -- %@",view);
    // TODO: 删除选中的书籍
    CGFloat alertHeight = 130;
    self.deboAlert = [[ECRBrebAlertView alloc] initWithFrame:CGRectMake(0, Screen_Height - alertHeight, Screen_Width, alertHeight)];
    self.deboAlert.delegate = self;
    [[UIApplication sharedApplication].keyWindow addSubview:self.deboAlert];
}
- (void)allSelected{
    // 全选
    
}
#pragma mark - ECRBrebAlertViewDelegate
- (void)brebAlert:(ECRBrebAlertView *)view clickEvent:(BOOL)isDelete{
    if (isDelete) {
        // 删除
    }else{
        // 取消
        [self.deboAlert removeFromSuperview];
        self.deboAlert = nil;
//        [self rg_setTabbarHidden:NO];
    }
}
- (void)createNavLeftBackItem{
    
}

- (ReaderViewController *)pdfReader{
    if (_pdfReader == nil) {
        NSString *pdf0 = _pdfBookPaths[0];
        ReaderDocument *doc = [[ReaderDocument alloc] initWithFilePath:pdf0 password:nil];
        _pdfReader = [[ReaderViewController alloc] initWithReaderDocument:doc];
        _pdfReader.delegate = self;
    }
    return _pdfReader;
}
//#pragma mark - YMEpubReaderManagerDelegate
//// read controller 生命周期 回调
//- (void)willBeginRead{
//    NSLog(@"willBeginRead");
//}
//- (void)didBeginRead{
//    NSLog(@"didBeginRead");
//}
//- (void)willEndRead{
//    NSLog(@"willEndRead");
//}
//- (void)didEndRead{
//    NSLog(@"didEndRead");
//}
//
//- (void)didAddDigest:(BookDigest *)digest{
//    
//}     //添加书摘或笔记，对应回调
//- (void)didDeleteDigest:(BookDigest *)digest{
//    
//}
//- (void)didAddBookMark:(Bookmark *)bookMark{
//    
//}   //添加书签，对应回调
//- (void)didDeleteBookMark:(Bookmark *)bookMark{
//    
//}

@end
