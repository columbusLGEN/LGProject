//
//  ECRBookRackController.m
//  EasyChineseReading-ios
//
//  Created by lee on 2017/9/5.
//  Copyright © 2017年 lee. All rights reserved.
//

#import "ECRBookRackController.h"
#import "ECRBookrackView.h"
#import "ECRBookrackModel.h"
#import "ECRDownloadStateModel.h"
#import "ECRBookrackCollectionViewCell.h"
#import "ECRBookrackFlowLayout.h"
#import "ECRFloderView.h"
#import "ECRBookFloderLayout.h"
#import "ECRDBReadViewController.h"
#import "ECRBookInfoViewController.h"
#import "ECREpubReader.h"// epub read
#import <YMEpubReaderKit/YMEpubReaderKit.h>
#import "ReaderViewController.h"// pdf read
#import "ECRBookrackNavMenuView.h"
#import "ECRBookrackEditBottom.h"
#import "ECRBrebAlertView.h"
#import "ECRBookDownloadStateView.h"
#import "ECRBookrackDataHandler.h"
#import "ECRSearchBooksViewController.h"

static NSString *ECRBookrackcell = @"ECRBookrackCollectionViewCell";

@interface ECRBookRackController ()<
ECRBookrackViewDelegate,
UICollectionViewDelegate,
UICollectionViewDataSource,
ECRBookrackFlowLayoutSwitchStateDelegate,
LXReorderableCollectionViewDataSource,
LXReorderableCollectionViewDelegateFlowLayout,
ECRFloderViewDelegate,
ECRBookrackNavMenuViewDelegate,
ReaderViewControllerDelegate,
ECRBookrackEditBottomDelegate,
ECRBrebAlertViewDelegate,
ECRBookrackCollectionViewCellDelegate,
UITextFieldDelegate,
ECRBookDownloadStateViewDelegate
>

@property (strong,nonatomic) ECRBookrackNavMenuView *menu;//
@property (strong,nonatomic) ECRBrebAlertView *deboAlert;//
@property (strong,nonatomic) ECRBookrackView *mainView;
@property (strong,nonatomic) ECRFloderView *floderView;
@property (strong,nonatomic) ECRBookrackEditBottom *breBottom;
@property (strong,nonatomic) UIView *currentView;//

@property (strong,nonatomic) ECRBookrackModel *currentFloderModel;//
@property (strong,nonatomic) NSMutableArray<ECRBookrackModel *> *allBookModels;// 全部图书模型数组
@property (strong,nonatomic) NSMutableArray<ECRBookrackModel *> *absModels;// all book selected 全部图书选中
@property (strong,nonatomic) NSMutableArray<ECRBookrackModel *> *bookrackModels;// 已购买模型数组
@property (strong,nonatomic) NSMutableArray<ECRBookrackModel *> *modelsWillBeRemove;// 已购买选中删除的数组
@property (strong,nonatomic) NSArray *pdfBookPaths;//

@property (assign,nonatomic) BOOL canReadEpub;//
@property (assign,nonatomic) BOOL isEdit_br;// 1 = 编辑，0 = 普通
@property (copy,nonatomic) void(^editDoneBlock)();

@property (strong,nonatomic) ReaderViewController *pdfReader;//

@property (assign,nonatomic) NSInteger allBookTotalCount;// 全部图书籍总数
@property (assign,nonatomic) NSInteger bookTotalCount;// 已购买书籍总数
@property (assign,nonatomic) NSInteger currentPlace;// 1 = 全部图书，2 = 已购买

@property (strong,nonatomic) UIRefreshControl *refreshControl;// 刷新控件

@end

@implementation ECRBookRackController

//- (void)setCurrentPlace:(NSInteger)currentPlace{
//    _currentPlace = currentPlace;
//    [self bookrackAndFloderReloadData];
//}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupUI];
    [self loadNewData];
    
}
// MARK: 请求数据
- (void)loadNewData{
    
//    self.allBookModels = [NSMutableArray arrayWithArray:arrM.copy];// 全部图书
//    [self.mainView.allOfBooks reloadData];
//    [self.mainView.allOfBooks setContentOffset:CGPointMake(0, 0)];
//    self.bookrackModels = [NSMutableArray arrayWithArray:arrM.copy];// 已购买
//    [self.mainView.bookrack reloadData];
    
    // 加载PDF书籍路径
    NSString *pdfBundlePath = [[NSBundle mainBundle] pathForResource:@"PDFBooks" ofType:@"bundle"];
    NSMutableArray *pdfPaths = [NSMutableArray arrayWithCapacity:10];
    for (NSInteger i = 0; i < 4; ++i) {
        NSString *bookName = [NSString stringWithFormat:@"pdf%ld.pdf",i];
        NSString *pdfBookPath = [pdfBundlePath stringByAppendingPathComponent:bookName];
        [pdfPaths addObject:pdfBookPath];
    }
    self.pdfBookPaths = pdfPaths.copy;
    self.pdfReader;// 初始化pdfreader，不可删除
    
    [ECRBookrackDataHandler bookShelf:^(NSMutableArray *arrAll, NSMutableArray *arrBuyed, NSInteger abCount, NSInteger bbCount) {
        [self.mainView.allOfBooks.mj_header endRefreshing];
        [self.mainView.bookrack.mj_header endRefreshing];
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [self.refreshControl endRefreshing];
        });
        
        self.allBookTotalCount = abCount;
        self.bookTotalCount = bbCount;
        self.allBookModels = [NSMutableArray arrayWithArray:arrAll.copy];// 全部图书
        self.bookrackModels = [NSMutableArray arrayWithArray:arrBuyed.copy];// 已购买
        
        [[NSOperationQueue mainQueue] addOperationWithBlock:^{
            [self.mainView.allOfBooks reloadData];
            [self.mainView.bookrack reloadData];
        }];
    } failure:^(NSError *error, NSString *msg) {
//        [self.mainView.allOfBooks.mj_header endRefreshing];
//        [self.mainView.bookrack.mj_header endRefreshing];
        [self.refreshControl endRefreshing];
    }];
    
    
}
- (void)setupUI{
    // 默认当前位置为 全部图书
    self.currentPlace = 1;
    self.allBookTotalCount = 0;
    self.bookTotalCount = 0;
    ECRBookrackFlowLayout *brLayout = [[ECRBookrackFlowLayout alloc] init];// 已购买
    brLayout.flssDelegate =  self;
    brLayout.currentPlace = 2;
    ECRBookrackFlowLayout *abLayout = [[ECRBookrackFlowLayout alloc] init];// 全部图书
    abLayout.flssDelegate = self;
    abLayout.currentPlace = 1;
    _mainView          = [[ECRBookrackView alloc]
                          initWithFrame:self.view.bounds
                          flowLayout:brLayout
                          abLayout:abLayout];
    _mainView.delegate = self;
    _mainView.bookrack.dataSource = self;
    _mainView.allOfBooks.dataSource = self;
    self.view          = _mainView;
    
    // 设置导航栏右箭头
    [self setNavRightItemsWithState:YES];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(floderViewTextFiledTextDidChange:) name:UITextFieldTextDidChangeNotification object:nil];
    
    // 系统刷新
//    self.refreshControl = [[UIRefreshControl alloc] initWithFrame:CGRectMake(-100, 0, 50, 50)];
//    [self.refreshControl addTarget:self action:@selector(loadNewData) forControlEvents:UIControlEventValueChanged];
//    [self.mainView.allOfBooks addSubview:self.refreshControl];
    
    MJRefreshNormalHeader *rfHeader = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        [self loadNewData];
    }];
    rfHeader.lastUpdatedTimeLabel.hidden = YES;
    self.mainView.allOfBooks.mj_header = rfHeader;
    
    MJRefreshNormalHeader *rfbrHeader = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        [self loadNewData];
    }];
    rfbrHeader.lastUpdatedTimeLabel.hidden = YES;
    self.mainView.bookrack.mj_header = rfbrHeader;
    
//    self.mainView.allOfBooks.mj_insetT = self.mainView.insets.top;
//    self.mainView.allOfBooks.mj_insetL = self.mainView.insets.left;
//    self.mainView.allOfBooks.mj_insetB = self.mainView.insets.bottom;
//    self.mainView.allOfBooks.mj_insetR = self.mainView.insets.right;

}

#pragma mark - 下载状态修改代理
- (void)bdsView:(ECRBookDownloadStateView *)view beginDownloadWithModel:(ECRDownloadStateModel *)model{
    /// 0.修改模型状态
    /// 1.开始（或暂停）下载 在模型内部实现
    [model changeDownloadStateWith:model.modelState progressBlock:^(CGFloat progress) {
        /// 2.设置view 的显示 进度
        [[NSOperationQueue mainQueue] addOperationWithBlock:^{
            if (progress == 100.0) {
                model.modelState = ECRDownloadStateModelStateDownloaded;
                view.model = model;
            }
            view.progress = progress;
        }];
    } failureBlock:^(NSError *error) {
        [[NSOperationQueue mainQueue] addOperationWithBlock:^{            
            model.modelState = ECRDownloadStateModelStateDownloadFailed;
            view.model = model;
        }];
    }];
    view.model = model;
}

#pragma mark - 导航点击代理 ECRBookrackNavMenuViewDelegate
- (void)closeBrnmView:(ECRBookrackNavMenuView *)view{
    [self.menu removeFromSuperview];
    self.menu = nil;
}
- (void)brnmView:(ECRBookrackNavMenuView *)view tb:(BOOL)tb{
    if (tb == 0) {
        NSLog(@"导入图书");
    }else{
        NSLog(@"时间排序");
    }
    [self.menu removeFromSuperview];
    self.menu = nil;
}

#pragma mark - 点击底部删除按钮 ECRBookrackEditBottomDelegate
- (void)brebDeleteClick:(ECRBookrackEditBottom *)view{
    if (self.currentPlace == 1) {// 全部图书
        // 如果没有选中任何一本书，则不alert
        if (self.absModels.count == 0) {
        }else{
            self.deboAlert.countForRemove = self.absModels.count;
            [[UIApplication sharedApplication].keyWindow addSubview:self.deboAlert];
//            [self.view addSubview:self.deboAlert];
        }
    }
    if (self.currentPlace == 2) {// 已购买
        // 如果没有选中任何一本书，则不alert
        if (self.modelsWillBeRemove.count == 0) {
            
        }else{
            self.deboAlert.countForRemove = self.modelsWillBeRemove.count;
            [[UIApplication sharedApplication].keyWindow addSubview:self.deboAlert];
        }
    }
    
}
// MARK: 全选
- (void)allSelected{
    
    // 全选时,要区分 全部图书  与  已购买
    // 点击之前的三种情况
    // situation A 全部未选中
    // situation B 部分选中，部分为选中
    // situation C 全部选中
    
    if (self.currentPlace == 1) {// 全部图书
        
        // 1修改模型状态
        if (self.absModels.count < self.allBookTotalCount || self.absModels.count == 0) {
            //  situation A & situation B
            for (NSInteger i = 0; i < self.allBookModels.count; i++) {
                ECRBookrackModel *modelOutside = self.allBookModels[i];
                if (!modelOutside.isSelected) {
                    modelOutside.isSelected = YES;
                    [self.absModels addObject:modelOutside];
                }
                if (modelOutside.books.count != 0) {// 分组
                    [self.absModels removeObject:modelOutside];// 删除文件夹模型
                    for (NSInteger j = 0; j < modelOutside.books.count; j++) {
                        ECRBookrackModel *modelInside = modelOutside.books[j];
                        if (!modelInside.isSelected) {
                            [self.absModels addObject:modelInside];
                            modelInside.isSelected = YES;
                        }
                    }
                }
            }
        }else if (self.absModels.count == self.allBookTotalCount) {
            // situation C
            for (NSInteger i = 0; i < self.allBookModels.count; i++) {
                ECRBookrackModel *modelOutside = self.allBookModels[i];
                modelOutside.isSelected = NO;
                if (modelOutside.books.count != 0) {
                    for (NSInteger j = 0; j < modelOutside.books.count; j++) {
                        ECRBookrackModel *modelInside = modelOutside.books[j];
                        modelInside.isSelected = NO;
                    }
                }
            }
            [self.absModels removeAllObjects];
            self.absModels = nil;
        }
        
    }
    if (self.currentPlace == 2) {// 已购买
        
        // 1修改模型状态
        if (self.modelsWillBeRemove.count < self.bookTotalCount || self.modelsWillBeRemove.count == 0) {
            //  situation A & situation B
            for (NSInteger i = 0; i < self.bookrackModels.count; i++) {
                ECRBookrackModel *modelOutside = self.bookrackModels[i];
                if (!modelOutside.isSelected) {
                    modelOutside.isSelected = YES;
                    [self.modelsWillBeRemove addObject:modelOutside];
                }
                if (modelOutside.alreadyBuyBooks.count != 0) {
                    [self.modelsWillBeRemove removeObject:modelOutside];// 删除文件夹模型
                    for (NSInteger j = 0; j < modelOutside.alreadyBuyBooks.count; j++) {
                        ECRBookrackModel *modelInside = modelOutside.alreadyBuyBooks[j];
                        if (!modelInside.isSelected) {
                            [self.modelsWillBeRemove addObject:modelInside];
                            modelInside.isSelected = YES;
                        }
                    }
                }
            }
        }else if (self.modelsWillBeRemove.count == self.bookTotalCount) {
            // situation C
            for (NSInteger i = 0; i < self.bookrackModels.count; i++) {
                ECRBookrackModel *modelOutside = self.bookrackModels[i];
                modelOutside.isSelected = NO;
                if (modelOutside.alreadyBuyBooks.count != 0) {
                    for (NSInteger j = 0; j < modelOutside.alreadyBuyBooks.count; j++) {
                        ECRBookrackModel *modelInside = modelOutside.alreadyBuyBooks[j];
                        modelInside.isSelected = NO;
                    }
                }
            }
            [self.modelsWillBeRemove removeAllObjects];
            self.modelsWillBeRemove = nil;
        }
        
    }
    
    //2 刷新UI
    [self bookrackAndFloderReloadData];// floder.collectionview reload 2
}
#pragma mark - 点击确定删除 ECRBrebAlertViewDelegate
- (void)brebAlert:(ECRBrebAlertView *)view clickEvent:(BOOL)isDelete{
    if (isDelete) {
        if (self.currentPlace == 1) {// 全部图书
            // MARK: 删除选中的书籍
            NSMutableArray *deleteBooks = [NSMutableArray new];
            for (NSInteger i = self.allBookModels.count - 1; i >= 0; i--) {
                ECRBookrackModel *model = self.allBookModels[i];
                if (model.books.count > 0) {
                    for (NSInteger j = model.books.count - 1; j >= 0; j--) {
//                        NSLog(@"books -- %ld",model.books.count);
                        ECRBookrackModel *modelInFile = model.books[j];
                        if (modelInFile.isSelected) {
                            // 删除 --> 等循环结束再执行
                            [deleteBooks addObject:modelInFile];
                            [self.floderView.bookModels removeObject:modelInFile];
                            [model.books removeObject:modelInFile];
                            [self.absModels removeObject:modelInFile];
//                            NSLog(@"model.bookname -- %@",model.bookName);
                        }
                        if (model.books.count == 0) {
                            [self.allBookModels removeObject:model];
                            [self.absModels removeObject:model];
                        }
                    }
                    
                }
                if (model.isSelected) {
                    // 删除 --> 等循环结束再执行
                    [deleteBooks addObject:model];
                    [self.allBookModels removeObject:model];
                    [self.absModels removeObject:model];
                }
            }
            [ECRBookrackDataHandler bookshelfDeleteBooksFromGroup:deleteBooks];
        }
        if (self.currentPlace == 2) {// 已购买
            NSMutableArray *deleteBooks = [NSMutableArray new];
            // MARK: 删除选中的书籍
            for (NSInteger i = self.bookrackModels.count - 1; i >= 0; i--) {
                ECRBookrackModel *model = self.bookrackModels[i];
                if (model.alreadyBuyBooks.count > 0) {
                    for (NSInteger j = model.alreadyBuyBooks.count - 1; j >= 0; j--) {
//                        NSLog(@"alreadyBuyBooks -- %ld",model.alreadyBuyBooks.count);
                        ECRBookrackModel *modelInFile = model.alreadyBuyBooks[j];
                        if (modelInFile.isSelected) {
                            // 删除 --> 等循环结束再执行
                            [deleteBooks addObject:modelInFile];
                            [self.floderView.bookModels removeObject:modelInFile];
                            [model.alreadyBuyBooks removeObject:modelInFile];
                            [self.modelsWillBeRemove removeObject:modelInFile];
//                            NSLog(@"model.bookname -- %@",model.bookName);
                        }
                        if (model.alreadyBuyBooks.count == 0) {
                            [self.bookrackModels removeObject:model];
                            [self.modelsWillBeRemove removeObject:model];
                        }
                    }
                    
                }
                if (model.isSelected) {
                    // 删除 --> 等循环结束再执行
                    [deleteBooks addObject:model];
                    [self.bookrackModels removeObject:model];
                    [self.modelsWillBeRemove removeObject:model];
                }
            }
            [ECRBookrackDataHandler bookshelfDeleteBooksFromGroup:deleteBooks];
        }
        
        // 刷新
        [self bookrackAndFloderReloadData];// floder.collectionview reload 3
    }else{
        // 取消
        
    }
    [self.deboAlert removeFromSuperview];
    self.deboAlert = nil;
    
}

#pragma mark - 编辑状态下 选中书籍
- (void)brCellBookEditDidClick:(ECRBookrackCollectionViewCell *)cell inx:(NSIndexPath *)inx model:(ECRBookrackModel *)model{
    if (self.currentPlace == 1) {// 全部图书
        // 将模型添加至 modelWillBeRemove
        if (model.isSelected) {
            [self.absModels addObject:model];
        }else{
            [self.absModels removeObject:model];
        }
        
        // 刷新UI
        [self.mainView.allOfBooks reloadItemsAtIndexPaths:@[inx]];
    }
    if (self.currentPlace == 2) {// 已购买
        // 将模型添加至 modelWillBeRemove
        if (model.isSelected) {
            [self.modelsWillBeRemove addObject:model];
        }else{
            [self.modelsWillBeRemove removeObject:model];
        }
        
        // 刷新UI
        [self.mainView.bookrack reloadItemsAtIndexPaths:@[inx]];
    }
    
    if (self.floderView) {
        [self.floderView.collectionView reloadItemsAtIndexPaths:@[inx]];
    }
}

#pragma mark - 退出PDF阅读时 ReaderViewControllerDelegate
- (void)dismissReaderViewController:(ReaderViewController *)viewController{
    [self.pdfReader dismissViewControllerAnimated:YES completion:^{
        // 退出pdf 阅读器的回调
        
    }];
}

#pragma mark - 文件夹代理 ECRFloderViewDelegate
- (void)floderViewClose:(ECRFloderView *)floderView{
    [self.navigationController setNavigationBarHidden:NO animated:NO];
    if (self.floderView != nil) {
        [self.floderView removeFromSuperview];
        self.floderView = nil;
    }
    [self.mainView.bookrack reloadData];
}
// 文件夹中点击完成, 退出编辑状态
- (void)floderViewEndEdit:(ECRFloderView *)floderView{
    [self editDoneFunc];
}
// MARK: 文件夹全选
- (void)floderViewAllSelect:(ECRFloderView *)floderView{
    // 点击之前
    // situation A 全部未选中
    // situation B 部分选中，部分为选中
    // situation C 全部选中
    // 先判断是哪种 情况,B 和 A合为一种情况
    
    if (self.currentPlace == 1) {// 全部图书
        BOOL situationC = YES;
        for (NSInteger i = 0; i < self.currentFloderModel.books.count; i++) {
            ECRBookrackModel *model = self.currentFloderModel.books[i];
            if (!model.isSelected) {
                situationC = NO;
                break;
            }
        }
        if (situationC) {//
            for (NSInteger i = 0; i < self.currentFloderModel.books.count; i++) {
                ECRBookrackModel *model = self.currentFloderModel.books[i];
                if (model.isSelected) {
                    // 把已经加到数组中的模型删除
                    [self.absModels removeObject:model];
                }
                model.isSelected = NO;
            }
        }else{
            for (NSInteger i = 0; i < self.currentFloderModel.books.count; i++) {
                ECRBookrackModel *model = self.currentFloderModel.books[i];
                if (!model.isSelected) {
                    // 把没加的加进去
                    [self.absModels addObject:model];
                }
                model.isSelected = YES;
            }
        }
    }
    if (self.currentPlace == 2) {// 已购买
        BOOL situationC = YES;
        for (NSInteger i = 0; i < self.currentFloderModel.books.count; i++) {
            ECRBookrackModel *model = self.currentFloderModel.books[i];
            if (!model.isSelected) {
                situationC = NO;
                break;
            }
        }
        if (situationC) {//
            for (NSInteger i = 0; i < self.currentFloderModel.books.count; i++) {
                ECRBookrackModel *model = self.currentFloderModel.books[i];
                if (model.isSelected) {
                    // 把已经加到数组中的模型删除
                    [self.modelsWillBeRemove removeObject:model];
                }
                model.isSelected = NO;
            }
        }else{
            for (NSInteger i = 0; i < self.currentFloderModel.books.count; i++) {
                ECRBookrackModel *model = self.currentFloderModel.books[i];
                if (!model.isSelected) {
                    // 把没加的加进去
                    [self.modelsWillBeRemove addObject:model];
                }
                model.isSelected = YES;
            }
        }
        
    }
    
    [self.floderView.collectionView reloadData];// self.floderView.collectionView reloaddata 1
}

#pragma mark - 点击书本或者文件夹 ECRBookrackViewDelegate
- (void)brView:(ECRBookrackView *)brViiew didSelectBookrack:(UICollectionView *)collectionView indexPath:(NSIndexPath *)indexPath{
    if ([collectionView isEqual:_mainView.allOfBooks]) {// MARK: 点击全部图书
        ECRBookrackModel *model = self.allBookModels[indexPath.item];
        if (model.books.count != 0) {
            NSLog(@"全部图书 -- 文件夹");
            [self.navigationController setNavigationBarHidden:YES animated:NO];
            // MARK: 打开文件夹(全部图书)
            ECRBookFloderLayout *brLayout = [[ECRBookFloderLayout alloc] init];
            brLayout.flssDelegate = self;
            _floderView = [[ECRFloderView alloc] initWithFrame:CGRectZero flowLayout:brLayout];
            _floderView.delegate = self;
            [self.view addSubview:_floderView];
            _floderView.fileName = model.name;
            _floderView.bookModels = model.books;
            _floderView.collectionView.dataSource = self;
            _floderView.collectionView.delegate = self;
            _floderView.isEdit_br = self.isEdit_br;// 控制文件夹view 全选按钮的显示0
            _floderView.floderName.delegate = self;
            self.currentFloderModel = model;
            
            [_floderView mas_makeConstraints:^(MASConstraintMaker *make) {
                make.edges.equalTo(self.view);
            }];
            
        }else{
            // TODO: 根据类型 打开书籍
            NSLog(@"全部图书 -- 图书");
        }
    }else{// MARK: 点击已购买
        ECRBookrackModel *model = self.bookrackModels[indexPath.item];
        if (model.alreadyBuyBooks.count != 0) {
            NSLog(@"已购买 -- 文件夹");
            [self.navigationController setNavigationBarHidden:YES animated:NO];
            // MARK: 打开文件夹(已购买)
            ECRBookFloderLayout *brLayout = [[ECRBookFloderLayout alloc] init];
            brLayout.flssDelegate = self;
            _floderView = [[ECRFloderView alloc] initWithFrame:CGRectZero flowLayout:brLayout];
            _floderView.delegate = self;
            [self.view addSubview:_floderView];
            _floderView.fileName = model.name;
            _floderView.bookModels = model.alreadyBuyBooks;
            _floderView.collectionView.dataSource = self;
            _floderView.collectionView.delegate = self;
            _floderView.isEdit_br = self.isEdit_br;// 控制文件夹view 全选按钮的显示0
            _floderView.floderName.delegate = self;
            self.currentFloderModel = model;
            
            [_floderView mas_makeConstraints:^(MASConstraintMaker *make) {
                make.edges.equalTo(self.view);
            }];

        }else{
            // TODO: 阅读书籍
            NSLog(@"已购买 -- 图书");
        }
    }
}
// MARK: 左右滑动
- (void)brViewDidSwitch:(ECRBookrackView *)brViiew place:(NSInteger)place{
    self.currentPlace = place;
//    NSLog(@"currentplace -- %ld",place);
}

#pragma mark - UICollectionViewDataSource
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    if ([collectionView isEqual:_mainView.bookrack]) {
        return _bookrackModels.count;
    }
    if ([collectionView isEqual:_floderView.collectionView]) {
        return _floderView.bookModels.count;
    }
    if ([collectionView isEqual:_mainView.allOfBooks]) {
        return _allBookModels.count;
    }
    return 0;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    // 待优化
    if ([collectionView isEqual:_mainView.bookrack]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];
        cell.inx  = indexPath;
        cell.bdsView.delegate = self;
        cell.delegate = self;
        if (self.bookrackModels.count == 0) {
        }else{
            model = self.bookrackModels[indexPath.item];
            
            cell.model = model;
        }
        return cell;
    }
    if ([collectionView isEqual:_floderView.collectionView]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];
        cell.inx  = indexPath;
        cell.bdsView.delegate = self;
        cell.delegate = self;
        if (self.floderView.bookModels.count == 0) {
        }else{
            model = self.floderView.bookModels[indexPath.item];
            NSLog(@"%@ -- %d",model.bookName,!model.isEditState);
            cell.model = model;
        }
        return cell;
    }
    if ([collectionView isEqual:_mainView.allOfBooks]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];
        cell.inx  = indexPath;
        cell.bdsView.delegate = self;
        cell.delegate = self;
        if (self.allBookModels.count == 0) {
        }else{
            model = self.allBookModels[indexPath.item];
            
            cell.model = model;
        }
        return cell;
    }
    return nil;
}

#pragma mark - 进入编辑状态 ECRBookrackFlowLayoutSwitchStateDelegate
- (void)brflayout:(ECRBookrackFlowLayout *)flowLayout beginEditWithModel:(ECRBookrackModel *)model doneBlock:(void (^)())doneBlock {
    
    if (self.isEdit_br) {
        
    }else{
        [self brModelChangeStateWith:YES];
        self.isEdit_br = YES;
        // 修改 UI
        // 1.tabbar
        [self rg_setTabbarHidden:YES];
        // 2.nav
        [self setNavRightItemsWithState:NO];
        self.editDoneBlock = doneBlock;
    }
}
// MARK: 从文件夹中移除书籍时 调用
- (void)brflayout:(ECRBookrackFlowLayout *)flowLayout outOfFloderWithModel:(ECRBookrackModel *)model currentView:(UIView *)currentView frame:(CGRect)frame{// 传过来的 currentView 是一个快照、快照没有xy
    // 从文件夹中删除该对象
    [self.floderView.bookModels removeObject:model];
    //    0.将current view 赋值给 bookrack的layout
    // 在currentview 的位置 再创建一个 相同的view
    //    self.currentView = [[UIView alloc] initWithFrame:frame];
    //    [self.currentView addSubview:currentView];
    //    [self.view addSubview:self.currentView];
    
    //    1.移除floder view
    [self floderViewClose:nil];
    //    2.向书架中添加该模型，并刷新UI
    // 判断是"已购买"，还是 "全部图书"
    
    if (self.currentPlace == 1) {// 全部图书
        [self.allBookModels insertObject:model atIndex:0];
        [self.mainView.allOfBooks reloadData];
    }
    if (self.currentPlace == 2) {// 已购买
        [self.bookrackModels insertObject:model atIndex:0];
        [self.mainView.bookrack reloadData];
    }
    
}

#pragma mark - LXReorderableCollectionViewDataSource
- (void)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath didMoveToIndexPath:(NSIndexPath *)toIndexPath{
    // 完成移动时执行
    [collectionView reloadData];
}

- (void)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath willMoveToIndexPath:(NSIndexPath *)toIndexPath{
    if ([collectionView isEqual:_mainView.bookrack]) {
        ECRBookrackModel *fromModel = _bookrackModels[fromIndexPath.item];
        //        ECRBookrackModel *toModel = _bookrackModels[toIndexPath.item];
        [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
        [_bookrackModels insertObject:fromModel atIndex:toIndexPath.item];
    }else if([collectionView isEqual:_mainView.allOfBooks]){
        ECRBookrackModel *fromModel = _allBookModels[fromIndexPath.item];
        [_allBookModels removeObjectAtIndex:fromIndexPath.item];
        [_allBookModels insertObject:fromModel atIndex:toIndexPath.item];
    }else{
        ECRBookrackModel *fromModel = _floderView.bookModels[fromIndexPath.item];
        [_floderView.bookModels removeObjectAtIndex:fromIndexPath.item];
        [_floderView.bookModels insertObject:fromModel atIndex:toIndexPath.item];
    }
    
}
// MARK: 移动书籍 & 调用接口
- (void)collectionView:(UICollectionView *)collectionView deleteItemAndModelAtIndexPath:(NSIndexPath *)fromIndexPath insertModel:(ECRBookrackModel *)model toIndexPath:(NSIndexPath *)toIndexPath{
    
    if ([collectionView isEqual:_mainView.bookrack]) {
        if (model == nil) {// 如果model为nil, 那么toIndex的模型为文件夹类型
            ECRBookrackModel *book = self.allBookModels[fromIndexPath.item];
            ECRBookrackModel *group = self.allBookModels[toIndexPath.item];
            if (self.currentPlace == 2) {
                [ECRBookrackDataHandler bookShelfAddBookToGroup:book groupModel:group];
            }
            [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
        }else{
            if (self.currentPlace == 2) {
                ECRBookrackModel *fromModel = self.allBookModels[fromIndexPath.item];
                ECRBookrackModel *toModel = self.allBookModels[toIndexPath.item];
                //        NSLog(@"model -- %@",model);
                //        NSLog(@"from -- %ld",fromModel.id);
                //        NSLog(@"from.name -- %@",fromModel.bookName);
                //        NSLog(@"to -- %ld",toModel.id);
                //        NSLog(@"to.name -- %@",toModel.bookName);
                [ECRBookrackDataHandler bookShelfDoubleBooksToNewGroupWithFromModel:fromModel toModel:toModel];
            }
            if (fromIndexPath.item < toIndexPath.item) {// 从前往后添加
                [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
                [_bookrackModels removeObjectAtIndex:(toIndexPath.item - 1)];
                [_bookrackModels insertObject:model atIndex:(toIndexPath.item - 1)];
            }else{// 从后往前添加
                
                [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
                [_bookrackModels removeObjectAtIndex:toIndexPath.item];
                [_bookrackModels insertObject:model atIndex:toIndexPath.item];
                //            NSLog(@"文件夹index%ld",toIndexPath.item);
            }
            
        }
    }
    if ([collectionView isEqual:_mainView.allOfBooks]) {
        if (model == nil) {// 如果model为nil, 那么toIndex的模型为文件夹类型
            ECRBookrackModel *book = self.allBookModels[fromIndexPath.item];
            ECRBookrackModel *group = self.allBookModels[toIndexPath.item];
            if (self.currentPlace == 1) {
                [ECRBookrackDataHandler bookShelfAddBookToGroup:book groupModel:group];
            }
            
            [_allBookModels removeObjectAtIndex:fromIndexPath.item];
        }else{
            
            if (self.currentPlace == 1) {
                ECRBookrackModel *fromModel = self.allBookModels[fromIndexPath.item];
                ECRBookrackModel *toModel = self.allBookModels[toIndexPath.item];
                //        NSLog(@"model -- %@",model);
                //        NSLog(@"from -- %ld",fromModel.id);
                //        NSLog(@"from.name -- %@",fromModel.bookName);
                //        NSLog(@"to -- %ld",toModel.id);
                //        NSLog(@"to.name -- %@",toModel.bookName);
                [ECRBookrackDataHandler bookShelfDoubleBooksToNewGroupWithFromModel:fromModel toModel:toModel];
            }
            
            if (fromIndexPath.item < toIndexPath.item) {// 从前往后添加
                [_allBookModels removeObjectAtIndex:fromIndexPath.item];
                [_allBookModels removeObjectAtIndex:(toIndexPath.item - 1)];
                [_allBookModels insertObject:model atIndex:(toIndexPath.item - 1)];
            }else{// 从后往前添加
                
                [_allBookModels removeObjectAtIndex:fromIndexPath.item];
                [_allBookModels removeObjectAtIndex:toIndexPath.item];
                [_allBookModels insertObject:model atIndex:toIndexPath.item];
                //            NSLog(@"文件夹index%ld",toIndexPath.item);
            }
        }
    }
    
}
- (BOOL)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath canMoveToIndexPath:(NSIndexPath *)toIndexPath{
    return YES;
}
- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{
    return YES;
}

#pragma mark - UICollectionViewDelegateFlowLayout
// 定义每个Section的四边间距
- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section{
    if ([collectionView isEqual:_floderView.collectionView]) {
        return UIEdgeInsetsMake(10, 0, 10, 0);//分别为上、左、下、右
    }
    return UIEdgeInsetsZero;
}
#pragma mark - UITextFieldDelegate & UITextFieldTextDidChangeNotification
// MARK: 修改 文件名
- (BOOL)textFieldShouldReturn:(UITextField *)textField{
//    [self modifiFileNameWithText:textField.text];
    [ECRBookrackDataHandler bookShelfUpdateGroupNameWithGroupId:self.currentFloderModel.groupId groupName:textField.text success:^(id objc){
       NSLog(@"修改分组名称成功 -- ");
        // 1 修改模型数据
        [self modifiFileNameWithText:textField.text];
        // 2 刷新UI
        if (self.currentPlace == 1) {
            [[NSOperationQueue mainQueue] addOperationWithBlock:^{
                [self.mainView.allOfBooks reloadData];
            }];
        }
        if (self.currentPlace == 2) {
            [[NSOperationQueue mainQueue] addOperationWithBlock:^{
                [self.mainView.bookrack reloadData];
            }];
        }
        
    } failure:^(NSError *error, NSString *msg) {
        NSLog(@"error -- %@",error);
        NSLog(@"msg -- %@",msg);
    }];
    [self.floderView endEditing:YES];
    return YES;
}
- (void)floderViewTextFiledTextDidChange:(NSNotification *)notification{
    UITextField *textField = notification.object;
    [self modifiFileNameWithText:textField.text];
}

- (void)setNavRightItemsWithState:(BOOL)normal{
    if (normal) {
        // TODO: nav button 间距优化
        CGFloat bItemW = 0;//28;
        CGFloat bItemY = 0;//-3;
        // 1
        UIButton *threeDot = [UIButton buttonWithType:UIButtonTypeCustom];
        [threeDot setImage:[UIImage imageNamed:@"icon_menu"] forState:UIControlStateNormal];
        [threeDot setFrame:CGRectMake(0, bItemY, bItemW, bItemW)];
        UIBarButtonItem *navThreeDot = [[UIBarButtonItem alloc] initWithCustomView:threeDot];
        [threeDot addTarget:self action:@selector(menuDropDown) forControlEvents:UIControlEventTouchUpInside];
        // 搜索
        UIButton *search = [UIButton buttonWithType:UIButtonTypeCustom];
        [search setImage:[UIImage imageNamed:@"icon_search"] forState:UIControlStateNormal];
        [search setFrame:CGRectMake(0, bItemY, bItemW, bItemW)];
        UIBarButtonItem *navSearch = [[UIBarButtonItem alloc] initWithCustomView:search];
        [search addTarget:self action:@selector(bookrackSearch) forControlEvents:UIControlEventTouchUpInside];
        
        self.navigationItem.leftBarButtonItem = nil;
        self.navigationItem.rightBarButtonItems = @[navThreeDot,navSearch];
    }else{
        if (self.navigationItem.rightBarButtonItems.count == 2) {
            self.navigationItem.rightBarButtonItems = nil;
            
            UIBarButtonItem *allSelectItem = [[UIBarButtonItem alloc] initWithTitle:@"全选" style:UIBarButtonItemStylePlain target:self action:@selector(allSelected)];
            self.navigationItem.leftBarButtonItem = allSelectItem;
            UIBarButtonItem *doneItem = [[UIBarButtonItem alloc] initWithTitle:@"完成" style:UIBarButtonItemStylePlain target:self action:@selector(editDoneFunc)];
            self.navigationItem.rightBarButtonItem = doneItem;
        }
    }
}
- (void)menuDropDown{// 展开下拉菜单
    if (self.menu == nil) {
        ECRBookrackNavMenuView *menu = [ECRBookrackNavMenuView bookrackNavMenuView];
        menu.delegate = self;
        menu.backgroundColor = [UIColor clearColor];
        menu.frame = CGRectMake(0, 0, Screen_Width, Screen_Height);
        [[UIApplication sharedApplication].keyWindow addSubview:menu];
        self.menu = menu;
    }
}
- (void)bookrackSearch{
    // MARK: 弹出搜索视图
    ECRSearchBooksViewController *scvc = [[ECRSearchBooksViewController alloc] init];
    scvc.classModel = nil;
    
    scvc.viewControllerPushWay = ECRBaseControllerPushWayPush;
    [self.navigationController pushViewController:scvc animated:NO];
}
// 结束编辑
- (void)editDoneFunc{
    // 0.如果删除alert view 存在，删除
    if (self.deboAlert != nil) {
        [self.deboAlert removeFromSuperview];
        self.deboAlert = nil;
    }
    // 1.显示tabbar
    [self rg_setTabbarHidden:NO];
    // 2.修改导航 UI
    [self setNavRightItemsWithState:YES];
    // 3.修改模型状态
    [self brModelChangeStateWith:NO];
    // 4.回调,告诉flow layout 结束 编辑
    if (self.editDoneBlock) {
        self.editDoneBlock();
    }
    // 5.结束编辑状态
    self.isEdit_br = NO;
}
- (void)brModelChangeStateWith:(BOOL)isEdit{
    // 已购买
    for (ECRBookrackModel *model in self.bookrackModels) {
        model.isEditState = isEdit;
        model.isSelected = NO;
        if (model.alreadyBuyBooks.count) {
            for (ECRBookrackModel *modelInFile in model.alreadyBuyBooks) {
                modelInFile.isEditState = isEdit;
                modelInFile.isSelected = NO;
//                NSLog(@"-- -- %d",modelInFile.isEditState);
            }
        }
    }
    // 全部图书
    for (ECRBookrackModel *model in self.allBookModels) {
        model.isEditState = isEdit;
        model.isSelected = NO;
        if (model.books.count) {
            for (ECRBookrackModel *modelInFile in model.books) {
                modelInFile.isEditState = isEdit;
                modelInFile.isSelected = NO;
                //                NSLog(@"-- -- %d",modelInFile.isEditState);
            }
        }
    }
    [self bookrackAndFloderReloadData];// floder.collectionview reload 4
}
- (void)bookrackAndFloderReloadData{
    //
    [[NSOperationQueue mainQueue] addOperationWithBlock:^{
        [UIView animateWithDuration:0 animations:^{
            [self.mainView.bookrack reloadData];
            [self.mainView.allOfBooks reloadData];
//            [self.mainView.bookrack performBatchUpdates:^{
//            } completion:nil];
        }];
        if (self.floderView != nil) {
            [UIView animateWithDuration:0 animations:^{
                [self.floderView.collectionView reloadData];
            }];
        }
    }];
}
// 显示，或者隐藏tabbar
- (void)rg_setTabbarHidden:(BOOL)isHidden{// YES:隐藏，NO 显示
    [self.tabBarController.tabBar setHidden:isHidden];
    self.floderView.isEdit_br = isHidden;// 控制文件夹view 全选按钮的显示1
    if (isHidden) {
        // 添加 “删除“按钮
        self.breBottom = [[ECRBookrackEditBottom alloc] initWithFrame:CGRectMake(0, Screen_Height - 49, Screen_Width, 49)];
        self.breBottom.delegate = self;
        [[UIApplication sharedApplication].keyWindow addSubview:self.breBottom];
    }else{
        // 移除 ”删除“按钮
        [self.breBottom removeFromSuperview];
        self.breBottom = nil;
    }
}
- (void)createNavLeftBackItem{
    
}
- (void)modifiFileNameWithText:(NSString *)newName{
    // 1.
    self.currentFloderModel.name = newName;
    // 2.
    self.floderView.fileName = newName;
}

- (ReaderViewController *)pdfReader{
    if (_pdfReader == nil) {
        NSString *pdf0 = _pdfBookPaths[0];
        ReaderDocument *doc = [[ReaderDocument alloc] initWithFilePath:pdf0 password:nil];
        _pdfReader = [[ReaderViewController alloc] initWithReaderDocument:doc];
        _pdfReader.delegate = self;
    }
    return _pdfReader;
}
- (NSMutableArray<ECRBookrackModel *> *)modelsWillBeRemove{
    if (_modelsWillBeRemove == nil) {
        _modelsWillBeRemove = [NSMutableArray arrayWithCapacity:10];
    }
    return _modelsWillBeRemove;
}
- (NSMutableArray<ECRBookrackModel *> *)absModels{
    if (_absModels == nil) {
        _absModels = [NSMutableArray arrayWithCapacity:10];
    }
    return _absModels;
}
- (ECRBrebAlertView *)deboAlert{
    if (_deboAlert == nil) {
        _deboAlert = [[ECRBrebAlertView alloc] initWithFrame:Screen_Bounds];
        _deboAlert.delegate = self;
    }
    return _deboAlert;
}

@end

/// MARK: 读书测试代码
/**
 if (indexPath.item < 3) {
 //MARK: 超媒体
 ECRDBReadViewController *read = [[ECRDBReadViewController alloc] init];
 read.viewControllerPushWay = ECRBaseControllerPushWayPush;
 [self.navigationController pushViewController:read animated:YES];
 }else if(indexPath.item < 6){
 // MARK: Epub
 if (indexPath.item == 3) {
 // 加载本地epub书籍
 [[ECREpubReader sharedEpubReader] loadBookList];
 self.canReadEpub = YES;
 }else{
 if (self.canReadEpub) {
 [[ECREpubReader sharedEpubReader] getTestBooks:^(NSArray<MyBook *> *books, NSString *info) {
 NSLog(@"books -- %@",books);
 MyBook *epub = books[indexPath.item - 4];
 [[ECREpubReader sharedEpubReader] readBook:epub fromController:self];
 }];
 }else{
 [self.view presentMessageTips:@"请先点击\"营销_3\""];
 }
 }
 
 }else{
 // MARK: PDF
 [self presentViewController:self.pdfReader animated:YES completion:nil];
 }
 */


// 本地测试数据
//    NSString *testURL0 = @"https://images-cn.ssl-images-amazon.com/images/I/51VNBGrPxVL._SX353_BO1,204,203,200_.jpg";
//    NSString *testURL1 = @"http://pic13.photophoto.cn/20091109/0005018327183438_b.jpg";
//    NSInteger count = 66;//arc4random_uniform(10) + 6;
//    NSMutableArray *arrM = [NSMutableArray arrayWithCapacity:10];
//    for (NSInteger i = 0; i < count; ++i) {
//        self.bookTotalCount += 1;
//        ECRBookrackModel *model = [[ECRBookrackModel alloc] init];
//
//        model.isEditState = NO;
//        model.name = [NSString stringWithFormat:@"营销_%ld",i];
//        model.bookType = i;
//        //        NSLog(@"bookType: --%ld",model.bookType);
//        model.groupId = 0;
//        model.bookPic = testURL0;
//
//        // TODO: 获取接口的数据以后给每本书添加下载状态模型
//        // 下载状态模型
//        ECRDownloadStateModel *dsModel = [[ECRDownloadStateModel alloc] init];// download state
//        dsModel.modelState = ECRDownloadStateModelStateNormal;
//        model.dsModel = dsModel;
//        dsModel.bookName = model.name;
//
//        if (i == 0 || i == 5 || i == 20) {
//            NSMutableArray *arr2 = [NSMutableArray arrayWithCapacity:10];
//            for (NSInteger i = 0; i < 9; ++i) {
//                self.bookTotalCount += 1;
//                ECRBookrackModel *modelBook = [[ECRBookrackModel alloc] init];
//                modelBook.bookPic = testURL1;
//                modelBook.name = [NSString stringWithFormat:@"java_%ld",i];
//                ECRDownloadStateModel *dsModel1 = [[ECRDownloadStateModel alloc] init];// download state
//                dsModel1.modelState = ECRDownloadStateModelStateNormal;
//                modelBook.dsModel = dsModel1;
//                dsModel1.bookName = modelBook.name;
//                [arr2 addObject:modelBook];
//            }
//            model.books = arr2;
//            model.groupId = 1;
//            self.bookTotalCount -= 1;// 文件夹 -1
//            model.name = [NSString stringWithFormat:@"文件夹%ld",i];
//        }
//        [arrM addObject:model];
//    }

