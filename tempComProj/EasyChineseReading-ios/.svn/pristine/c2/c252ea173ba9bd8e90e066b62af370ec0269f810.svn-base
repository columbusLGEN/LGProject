//
//  UIVCRechargeVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 17/9/7.
//  Copyright © 2017年 lee. All rights reserved.
//

#import "UVirtualCurrencyRechargeVC.h"

#import <PassKit/PassKit.h>                                 //用户绑定的银行卡信息
#import <PassKit/PKPaymentAuthorizationViewController.h>    //Apple pay的展示控件
#import <AddressBook/AddressBook.h>                         //用户联系信息相关

#import <StoreKit/StoreKit.h>                               //AppStore 支付
#import <AlipaySDK/AlipaySDK.h>                             //ali 支付

#import "UIVCRPayTypeCollectionViewCell.h"                  // 支付方式
#import "UIVCRSelectPriceCollectionViewCell.h"              // 选择价格
#import "UVCRShowPriceCollectionViewCell.h"                 // 支付价格

#import "UIVCRHeaderRV.h"
#import "UIVCRFooterRV.h"

#import "PaySuccessViewController.h"

static CGFloat kSpace = 10.f;
static NSString * const appScheme = @"EasyChineseReading";

@interface UVirtualCurrencyRechargeVC ()<
UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout,
//PKPaymentAuthorizationViewControllerDelegate,
SKPaymentTransactionObserver, SKProductsRequestDelegate,
UIVCRFooterRVDelegate>

@property (strong, nonatomic) IBOutlet UICollectionView *collectionView;
@property (strong, nonatomic) UICollectionViewFlowLayout *layout;

@property (nonatomic, strong) UIVCRFooterRV *footerView;       // 支付

@property (strong, nonatomic) NSMutableArray *arrRechargeType; // 充值方式
@property (strong, nonatomic) NSArray *arrRechargeNumb;        // 充值数额
@property (strong, nonatomic) NSArray *arrPay;                 // 支付相关信息

@property (nonatomic, assign) NSInteger selectedType;          // 选择支付类别
@property (nonatomic, assign) NSInteger selectedNumb;          // 选择支付数额

@property (nonatomic, assign) CGFloat price;                   // 支付的金额

@property (assign, nonatomic) BOOL showSelected;               // 展示选择方式

@property (strong, nonatomic) NSString *shop;                  // appstore 支付名

@end

@implementation UVirtualCurrencyRechargeVC

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self configRechargeView];
    [self getPayType];
    [self getPayPrice];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.navigationController setNavigationBarHidden:NO animated:YES];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)updateSystemLanguage
{
    self.title = _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeBuy ? LOCALIZATION(@"虚拟币充值") : LOCALIZATION(@"包月套餐");
    [_collectionView reloadData];
}

#pragma mark - 配置 虚拟币充值界面

- (void)configRechargeView
{
    self.collectionView.collectionViewLayout = self.layout;

    [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UIVCRPayTypeCollectionViewCell class]) bundle:nil]     forCellWithReuseIdentifier:NSStringFromClass([UIVCRPayTypeCollectionViewCell class])];
    [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UIVCRSelectPriceCollectionViewCell class]) bundle:nil] forCellWithReuseIdentifier:NSStringFromClass([UIVCRSelectPriceCollectionViewCell class])];
    [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UVCRShowPriceCollectionViewCell class]) bundle:nil]    forCellWithReuseIdentifier:NSStringFromClass([UVCRShowPriceCollectionViewCell class])];
    
    [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UIVCRHeaderRV class]) bundle:nil] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:NSStringFromClass([UIVCRHeaderRV class])];
    [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UIVCRFooterRV class]) bundle:nil] forSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:NSStringFromClass([UIVCRFooterRV class])];
    
    _selectedType = ENUM_PayTypeApplePay;
}

#pragma mark - 获取数据

// 支付类型
- (void)getPayType
{
    [[OrderRequest sharedInstance] getPayTypeCompletion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            NSArray *array = [PayTypeModel mj_objectArrayWithKeyValuesArray:object];
            
            for (NSInteger i = 0; i < array.count; i ++) {
                PayTypeModel *payType = array[i];
                if ([payType.isdisplay isEqualToString:@"1"]) {
                    [self.arrRechargeType addObject:payType];
                }
            }
            _showSelected = _arrRechargeType.count > 1;
            [_collectionView reloadData];
        }
    }];
}

// 支付价格
- (void)getPayPrice
{
    [[OrderRequest sharedInstance] getPayPriceWithPayPurpose:_payPurpose
                                                    serialId:_payPurpose == ENUM_PayPurposeContinue || _payPurpose == ENUM_PayPurposeLease ? _serial.serialId : 0
                                                  completion:^(id object, ErrorModel *error) {
                                                      if (error) {
                                                          [self presentFailureTips:error.message];
                                                      }
                                                      else {
                                                          _arrRechargeNumb = [PayPriceModel mj_objectArrayWithKeyValuesArray:object];
                                                          [_collectionView reloadData];
                                                      }
                                                  }];
}

#pragma mark - UICollectionViewDataSource

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    if (_showSelected) {
        return _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease ? 2 : 3;
    }
    else {
        return _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease ? 1 : 2;
    }
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    if (_showSelected) {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            return 0 == section ? self.arrRechargeType.count : self.arrRechargeNumb.count;
        }
        else {
            if (0 == section) {
                return 2;
            }
            else if (1 == section) {
                return self.arrRechargeType.count;
            }
            else {
                return self.arrRechargeNumb.count;
            }
        }
    }
    else {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            return self.arrRechargeNumb.count;
        }
        else {
            return 0 == section ? 2 : self.arrRechargeNumb.count;
        }
    }
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    
    UVCRShowPriceCollectionViewCell *sCell        = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([UVCRShowPriceCollectionViewCell class])    forIndexPath:indexPath];
    UIVCRPayTypeCollectionViewCell *payTypeCell   = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([UIVCRPayTypeCollectionViewCell class])     forIndexPath:indexPath];
    UIVCRSelectPriceCollectionViewCell *priceCell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([UIVCRSelectPriceCollectionViewCell class]) forIndexPath:indexPath];
    
    if (_showSelected) {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            if (0 == indexPath.section) {
                payTypeCell.isSelected = indexPath.row == _selectedType - 1;
                payTypeCell.data = _arrRechargeType[indexPath.row];
                return payTypeCell;
            }
            else {
                priceCell.isSelected = indexPath.row == _selectedNumb;
                priceCell.payPurpose = _payPurpose;
                priceCell.data = _arrRechargeNumb[indexPath.row];
                return priceCell;
            }
        }
        else {
            if (0 == indexPath.section) {
                sCell.data = self.arrPay[indexPath.row];
                return sCell;
            }
            else if (1 == indexPath.section) {
                payTypeCell.isSelected = indexPath.row == _selectedType - 1;
                payTypeCell.data = _arrRechargeType[indexPath.row];
                return payTypeCell;
            }
            else {
                priceCell.isSelected = indexPath.row == _selectedNumb;
                priceCell.payPurpose = _payPurpose;
                priceCell.data = _arrRechargeNumb[indexPath.row];
                return priceCell;
            }
        }
    }
    else {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            priceCell.isSelected = indexPath.row == _selectedNumb;
            priceCell.payPurpose = _payPurpose;
            priceCell.data = _arrRechargeNumb[indexPath.row];
            return priceCell;
        }
        else {
            if (0 == indexPath.section) {
                sCell.data = self.arrPay[indexPath.row];
                return sCell;
            }
            else {
                priceCell.isSelected = indexPath.row == _selectedNumb;
                priceCell.payPurpose = _payPurpose;
                priceCell.data = _arrRechargeNumb[indexPath.row];
                return priceCell;
            }
        }
    }
}

#pragma mark UICollectionViewDelegate

- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
    if (kind == UICollectionElementKindSectionHeader) {
        UIVCRHeaderRV *headerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:NSStringFromClass([UIVCRHeaderRV class]) forIndexPath:indexPath];
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            if (0 == indexPath.section && _showSelected) {
                headerView.lblDescribe.text = _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeBuy ? LOCALIZATION(@"请选择充值方式") : LOCALIZATION(@"请选择支付方式");
            }
            else {
                headerView.lblDescribe.text = _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeBuy ?  LOCALIZATION(@"请选择充值金额") : LOCALIZATION(@"请选择租阅套餐");
            }
        }
        else {
            if (0 == indexPath.section) {
                headerView.data = [NSString stringWithFormat:@"%@: %.2f %@", LOCALIZATION(@"商品共计"), _payPrice, LOCALIZATION(@"虚拟币")];
            }
            else if (1 == indexPath.section && _showSelected) {
                headerView.lblDescribe.text = _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeBuy ? LOCALIZATION(@"请选择充值方式") : LOCALIZATION(@"请选择支付方式");
            }
            else {
                headerView.lblDescribe.text = _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeBuy ?  LOCALIZATION(@"请选择充值金额") : LOCALIZATION(@"请选择租阅套餐");
            }
        }
        return headerView;
    }
    else {
        _footerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:@"UIVCRFooterRV" forIndexPath:indexPath];
        _footerView.delegate = self;
        PayPriceModel *price = _arrRechargeNumb.firstObject;

        if (_showSelected) { // 可以选择支付方式
            if ((_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) && 1 == indexPath.section) { // 充值(不显示余额信息)
                if (_payPrice == 0) {
                    _price = [UserRequest sharedInstance].language == ENUM_LanguageTypeChinese ? price.rmb : price.dollar;
                }
                else {
                    
                }
                _footerView.payNum = _price;
            }
            else { // 非充值
                if (2 == indexPath.section) {
                    if (_payPrice == 0) {
                        if (_payPurpose == ENUM_PayPurposeBuy) {
                            _price = [UserRequest sharedInstance].language == ENUM_LanguageTypeChinese ? price.rmb : price.dollar;
                        }
                        else {
                            _price = price.price;
                        }
                    }
                }
            }
        }
        else { // 苹果支付
            if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
                if (_payPrice == 0) {
                    _price = [UserRequest sharedInstance].language == ENUM_LanguageTypeChinese ? price.rmb : price.dollar;
                }
            }
            else {
                if (_payPrice == 0) {
                    if (1 == indexPath.section) {
                        _price = [UserRequest sharedInstance].language == ENUM_LanguageTypeChinese ? price.rmb : price.dollar;
                    }
                }
                else {
                    
                }
            }
        }
        return _footerView;
    }
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
{
    CGFloat width  = 0;
    CGFloat height = 0;
    
    if (_showSelected) {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            width  = 1 == indexPath.section && _showSelected ? (Screen_Width - kSpace * 3) / 2 : Screen_Width - kSpace * 2;
            height = 1 == indexPath.section && _showSelected ? 70 : 60;
        }
        else {
            width  = 2 == indexPath.section && _showSelected ? (Screen_Width - kSpace * 3) / 2 : Screen_Width - kSpace * 2;
            height = 2 == indexPath.section && _showSelected ? 70 : 60;
        }
    }
    else {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            width  = (Screen_Width - kSpace * 3) / 2;
            height = 70;
        }
        else {
            width  = 1 == indexPath.section && _showSelected ? (Screen_Width - kSpace * 3) / 2 : Screen_Width - kSpace * 2;
            height = 1 == indexPath.section && _showSelected ? 70 : 60;
        }
    }
    return CGSizeMake(width, height);
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section
{
    return CGSizeMake(Screen_Width, 56);
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section
{
    CGFloat height = 0;
    
    if (_showSelected) {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            height = 1 == section ? 150 : .5f;
        }
        else {
            height = 2 == section ? 150 : .5f;
        }
    }
    else {
        if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
            height = 150;
        }
        else {
            height = 1 == section ? 150 : .5f;
        }
    }
    
    return CGSizeMake(Screen_Width, height);
}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (_payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
        if (0 == indexPath.section && _showSelected) {
            _selectedType = indexPath.row + 1;
            [self.collectionView reloadData];
        }
        else {
            _selectedNumb = indexPath.row;
            PayPriceModel *price = [_arrRechargeNumb objectAtIndex:indexPath.row];
            if (_payPurpose == ENUM_PayPurposeBuy || _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
                _price = [UserRequest sharedInstance].language == ENUM_LanguageTypeChinese ? price.rmb : price.dollar;
            }
            else {
                _price = price.price;
            }
            [self.collectionView reloadData];
        }
    }
    else {
        if (1 == indexPath.section && _showSelected) {
            _selectedType = indexPath.row + 1;
            [self.collectionView reloadData];
        }
        else {
            _selectedNumb = indexPath.row;
            PayPriceModel *price = [_arrRechargeNumb objectAtIndex:indexPath.row];
            if (_payPurpose == ENUM_PayPurposeBuy || _payPurpose == ENUM_PayPurposeRecharge || _payPurpose == ENUM_PayPurposeAllLease) {
                _price = [UserRequest sharedInstance].language == ENUM_LanguageTypeChinese ? price.rmb : price.dollar;
            }
            else {
                _price = price.price;
            }
            [self.collectionView reloadData];
        }
    }
}

#pragma mark -
#pragma mark UIVCRFooterRVDelegate

- (void)payWithMoney
{
    if (_showSelected) {
        if (_selectedType == ENUM_PayTypeApplePay) {
//            [self applePayHandle];
        }
        else {
//            [self aliPayHandle];
        }
    }
    else {
//        [self applePayHandle];
    }
}

- (void)paySuccessWithOrder:(OrderModel *)order
{
    PaySuccessViewController *success = [PaySuccessViewController new];
    success.order = order;
    
    [self presentViewController:success animated:YES completion:^{
        [self.navigationController popToRootViewControllerAnimated:YES];
    }];
}

#pragma mark --------------- 支付选择项 ---------------
#pragma mark - applePay

- (void)applePayHandle
{
    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];
    
    if([SKPaymentQueue canMakePayments]){
        _shop = @"购物";
        [self requestProductData:_shop];
    }else{
        NSLog(@"不允许程序内付费");
    }
}

//去苹果服务器请求商品
- (void)requestProductData:(NSString *)data {
    NSLog(@"-------------请求对应的产品信息----------------");
    [self showWaitTips];
    NSArray *product = [[NSArray alloc] initWithObjects:data,nil];
    
    NSSet *nsset = [NSSet setWithArray:product];
    SKProductsRequest *request = [[SKProductsRequest alloc] initWithProductIdentifiers:nsset];
    request.delegate = self;
    [request start];
}

//收到产品返回信息
- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response {
    NSLog(@"--------------收到产品反馈消息---------------------");
    NSArray *product = response.products;
    if([product count] == 0){
        [self dismissTips];
        NSLog(@"--------------没有商品------------------");
        return;
    }
    
    NSLog(@"productID:%@", response.invalidProductIdentifiers);
    NSLog(@"产品付费数量:%lu",(unsigned long)[product count]);
    
    SKProduct *p = nil;
    for (SKProduct *pro in product) {
        NSLog(@"%@", [pro description]);
        NSLog(@"%@", [pro localizedTitle]);
        NSLog(@"%@", [pro localizedDescription]);
        NSLog(@"%@", [pro price]);
        NSLog(@"%@", [pro productIdentifier]);
        
        if([pro.productIdentifier isEqualToString:_shop]){
            p = pro;
        }
    }
    
    SKPayment *payment = [SKPayment paymentWithProduct:p];
    NSLog(@"发送购买请求");
    [[SKPaymentQueue defaultQueue] addPayment:payment];
}

//请求失败
- (void)request:(SKRequest *)request didFailWithError:(NSError *)error {
    [self presentFailureTips:@"支付失败"];
    NSLog(@"------------------错误-----------------:%@", error);
}

- (void)requestDidFinish:(SKRequest *)request{
    [self dismissTips];
    NSLog(@"------------反馈信息结束-----------------");
}

/**
 *  验证购买，避免越狱软件模拟苹果请求达到非法购买问题
 */
-(void)verifyPurchaseWithPaymentTransaction{
    //从沙盒中获取交易凭证并且拼接成请求体数据
    NSURL *receiptUrl = [[NSBundle mainBundle] appStoreReceiptURL];
    NSData *receiptData = [NSData dataWithContentsOfURL:receiptUrl];
    
    NSString *receiptString = [receiptData base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];//转化为base64字符串
    
    NSString *bodyString = [NSString stringWithFormat:@"{\"receipt-data\" : \"%@\"}", receiptString];//拼接请求数据
    NSData *bodyData = [bodyString dataUsingEncoding:NSUTF8StringEncoding];
    
    //创建请求到苹果官方进行购买验证
    NSURL *url=[NSURL URLWithString:SANDBOX];
    NSMutableURLRequest *requestM = [NSMutableURLRequest requestWithURL:url];
    requestM.HTTPBody=bodyData;
    requestM.HTTPMethod=@"POST";
    //创建连接并发送同步请求
    NSError *error=nil;
    NSData *responseData=[NSURLConnection sendSynchronousRequest:requestM returningResponse:nil error:&error];
    if (error) {
        NSLog(@"验证购买过程中发生错误，错误信息：%@",error.localizedDescription);
        return;
    }
    NSDictionary *dic=[NSJSONSerialization JSONObjectWithData:responseData options:NSJSONReadingAllowFragments error:nil];
    NSLog(@"%@",dic);
    if([dic[@"status"] intValue] == 0){
        NSLog(@"购买成功！");
        NSDictionary *dicReceipt= dic[@"receipt"];
        NSDictionary *dicInApp=[dicReceipt[@"in_app"] firstObject];
        NSString *productIdentifier= dicInApp[@"product_id"];//读取产品标识
        //如果是消耗品则记录购买数量，非消耗品则记录是否购买过
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        if ([productIdentifier isEqualToString:@"123"]) {
            NSInteger purchasedCount = [defaults integerForKey:productIdentifier]; //已购买数量
            [[NSUserDefaults standardUserDefaults] setInteger:(purchasedCount + 1) forKey:productIdentifier];
        }else{
            [defaults setBool:YES forKey:productIdentifier];
        }
        //在此处对购买记录进行存储，可以存储到开发商的服务器端
    }else{
        NSLog(@"购买失败，未通过验证！");
    }
}

//监听购买结果
- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transaction{
    for(SKPaymentTransaction *tran in transaction){
        switch (tran.transactionState) {
            case SKPaymentTransactionStatePurchased:{
                NSLog(@"交易完成");
                // 发送到苹果服务器验证凭证
                [self verifyPurchaseWithPaymentTransaction];
                [[SKPaymentQueue defaultQueue] finishTransaction:tran];
                
            }
                break;
            case SKPaymentTransactionStatePurchasing:
                NSLog(@"商品添加进列表");
                
                break;
            case SKPaymentTransactionStateRestored:{
                NSLog(@"已经购买过商品");
                
                [[SKPaymentQueue defaultQueue] finishTransaction:tran];
            }
                break;
            case SKPaymentTransactionStateFailed:{
                NSLog(@"交易失败");
                [[SKPaymentQueue defaultQueue] finishTransaction:tran];
                [self presentFailureTips:@"购买失败"];
            }
                break;
            default:
                break;
        }
    }
}

//交易结束
- (void)completeTransaction:(SKPaymentTransaction *)transaction{
    NSLog(@"交易结束");
    //交易验证
    NSURL *recepitURL = [[NSBundle mainBundle] appStoreReceiptURL];
    NSData *receipt = [NSData dataWithContentsOfURL:recepitURL];
    
    if(!receipt){
        
    }
    
    NSError *error;
    NSDictionary *requestContents = @{@"receipt-data": [receipt base64EncodedStringWithOptions:0]};
    NSData *requestData = [NSJSONSerialization dataWithJSONObject:requestContents options:0  error:&error];
    
    if (!requestData) { /* ... Handle error ... */ }
    
    //In the test environment, use https://sandbox.itunes.apple.com/verifyReceipt
    //In the real environment, use https://buy.itunes.apple.com/verifyReceipt
    // Create a POST request with the receipt data.
    NSURL *storeURL = [NSURL URLWithString:@"https://buy.itunes.apple.com/verifyReceipt"];
    NSMutableURLRequest *storeRequest = [NSMutableURLRequest requestWithURL:storeURL];
    [storeRequest setHTTPMethod:@"POST"];
    [storeRequest setHTTPBody:requestData];
    
    // Make a connection to the iTunes Store on a background queue.
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    [NSURLConnection sendAsynchronousRequest:storeRequest queue:queue completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
        if (connectionError) {
            /* ... Handle error ... */
        } else {
            NSError *error;
            NSDictionary *jsonResponse = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error];
            if (!jsonResponse) { /* ... Handle error ...*/ }
            /* ... Send a response back to the device ... */
            //Parse the Response
        }
    }];
    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
}

- (void)dealloc{
    [[SKPaymentQueue defaultQueue] removeTransactionObserver:self];
}

//- (void)applePayHandle
//{
//    // 是否支持ApplePay
//    if ([PKPaymentAuthorizationViewController canMakePayments]) {
//        if (![PKPaymentAuthorizationViewController class]) {
//            //PKPaymentAuthorizationViewController需iOS8.0以上支持
//            [self presentFailureTips:LOCALIZATION(@"操作系统不支持ApplePay，请升级至9.0以上版本，且iPhone6以上设备才支持")];
//            return;
//        }
//        //检查当前设备是否可以支付
//        if (![PKPaymentAuthorizationViewController canMakePayments]) {
//            //支付需iOS9.0以上支持
//            [self presentFailureTips:LOCALIZATION(@"操作系统不支持ApplePay，请升级至9.0以上版本，且iPhone6以上设备才支持")];
//            return;
//        }
//        //检查用户是否可进行某种卡的支付，是否支持Amex、MasterCard、Visa与银联四种卡，根据自己项目的需要进行检测
//        NSArray *supportedNetworks = @[PKPaymentNetworkAmex,            // 美国运通卡
//                                       PKPaymentNetworkMasterCard,      // Master卡
//                                       PKPaymentNetworkVisa,            // Visa卡
//                                       PKPaymentNetworkChinaUnionPay];  // 中国银联卡
//        // 判断 设备上用户有没有添加银行卡，如果没添加，不写这个判断，真机上会crash。
//        if (![PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:supportedNetworks]) {
//            [self presentFailureTips:LOCALIZATION(@"还没有绑定支付卡, 请先到 wallet 绑定支付卡")];
//            return;
//        }
//
//        // 支付类目及额度
//        PKPaymentRequest *request = [[PKPaymentRequest alloc] init];
//
//        PKPaymentSummaryItem *widget1 = [PKPaymentSummaryItem
//                                         summaryItemWithLabel:@"Widget 1"
//                                         amount:[NSDecimalNumber decimalNumberWithString:@"0.01"]];
//
//        PKPaymentSummaryItem *widget2 = [PKPaymentSummaryItem
//                                         summaryItemWithLabel:@"Widget 2"
//                                         amount:[NSDecimalNumber decimalNumberWithString:@"0.01"]];
//
//        PKPaymentSummaryItem *total = [PKPaymentSummaryItem
//                                       summaryItemWithLabel:@"Grand Total"
//                                       amount:[NSDecimalNumber decimalNumberWithString:@"0.02"]];
//
//        request.paymentSummaryItems = @[widget1, widget2, total];
//        // 国家码
//        request.countryCode = @"CN";
//        // 币种 (CNY 人民币)
//        request.currencyCode = @"CHW";
//
//        //能支付的币种
//        request.supportedNetworks = @[
//                                      PKPaymentNetworkChinaUnionPay,
//                                      PKPaymentNetworkMasterCard,
//                                      PKPaymentNetworkVisa
//                                      ];
//
//        //Merchant ID
//        request.merchantIdentifier = @"merchant.com.retech.EasyChineseReading.applepay";
//
//        // 询问你的付款处理器 （PKMerchantCapabilityCredit
//        // 信用卡，PKMerchantCapabilityDebit 借记卡）
//
//        /*
//         PKMerchantCapabilityCredit NS_ENUM_AVAILABLE_IOS(9_0)   = 1UL << 2,   //
//         支持信用卡
//         PKMerchantCapabilityDebit  NS_ENUM_AVAILABLE_IOS(9_0)   = 1UL << 3    //
//         支持借记卡
//         */
//        request.merchantCapabilities = PKMerchantCapabilityDebit;
//        // 添加联系人全部信息
//        request.requiredShippingAddressFields = PKAddressFieldAll;
//
//        // 调用 PKPaymentAuthorizationViewController
//        PKPaymentAuthorizationViewController *paymentPane = [[PKPaymentAuthorizationViewController alloc] initWithPaymentRequest:request];
//        paymentPane.delegate = self;
//        [self presentViewController:paymentPane animated:TRUE completion:nil];
//
//    } else {
//        [self presentFailureTips:LOCALIZATION(@"你的设备目前还不支持 applepay 支付")];
//        return;
//    }
//}
//
//#pragma mark PKPaymentAuthorizationViewControllerDelegate
//
//- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller didAuthorizePayment:(PKPayment *)payment completion:(void (^)(PKPaymentAuthorizationStatus status))completion {
//    NSLog(@"Payment was authorized: %@", payment);
//
////    -- PKPayment 对象
////    token 支付成功之后的回执，需要上传给服务器。
////    billingAddress 用户账单地址
////    billingContact 用户账单信息
////    shippingAddress 送货地址
////    shippingContact 送货信息
////    shippingMethod 送货方式
//
//    BOOL asyncSuccessful = FALSE;
//
//    if (asyncSuccessful) {
//        completion(PKPaymentAuthorizationStatusSuccess);
//        [self presentSuccessTips:LOCALIZATION(@"支付成功")];
//    }
//    else {
//        completion(PKPaymentAuthorizationStatusFailure);
//        [self presentFailureTips:LOCALIZATION(@"支付失败")];
//    }
//}
//
//- (void)paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)controller {
//    // hide the payment window
//    [controller dismissViewControllerAnimated:TRUE completion:nil];
//}

#pragma mark - aliPay
// 使用alipay
- (void)aliPayHandle
{
    [self createOrderWithBooks:nil];
}
// 创建订单
- (void)createOrderWithBooks:(NSArray *)books
{
    _price = 0.01;
    
    [[OrderRequest sharedInstance] addOrderWithType:ENUM_PayPurposeRecharge payType:_selectedType totalmoney:_price books:@[] score:0 serialId:0 readDay:0 fullMinusCost:0 finalTotalMoney:0 rechargeMoney:0 completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            NSLog(@"order object %@", object);
            NSString *string = object;
            [self aliPayWithOrderString:string];
        }
    }];
}

/**
  使用alipay支付

 @param orderString 加密订单码
 */
- (void)aliPayWithOrderString:(NSString *)orderString
{
    // NOTE: 调用支付结果开始支付
    [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) {
        AliPayResultDicModel *aliPayResultDic = [AliPayResultDicModel mj_objectWithKeyValues:resultDic];
        AliPayResultModel *aliPayresult       = [AliPayResultModel    mj_objectWithKeyValues:aliPayResultDic.result];
        AliPayResponseModel *aliPayResponse   = [AliPayResponseModel  mj_objectWithKeyValues:aliPayresult.alipay_trade_app_pay_response];
        NSString *orderId = aliPayResponse.out_trade_no;
        switch (aliPayResultDic.resultStatus) {
            case 9000: // 订单支付成功
                [self getResultWithOrderId:orderId];
                break;
            case 8000: // 正在处理中，支付结果未知（有可能已经支付成功），请查询商户订单列表中订单的支付状态
                [self presentFailureTips:LOCALIZATION(@"正在处理中...")];
                break;
            case 4000: // 订单支付失败
                [self presentFailureTips:LOCALIZATION(@"支付失败")];
                break;
            case 5000: // 重复请求
                [self presentSuccessTips:LOCALIZATION(@"重复请求")];
                break;
            case 6001: // 用户中途取消
                [self presentSuccessTips:LOCALIZATION(@"取消支付")];
                break;
            case 6002: // 网络连接出错
                [self presentSuccessTips:LOCALIZATION(@"网络连接失败")];
                break;
            case 6004: // 支付结果未知（有可能已经支付成功），请查询商户订单列表中订单的支付状态
                [self presentFailureTips:LOCALIZATION(@"支付结果未知, 请查询订单状态")];
                break;
            default:   // 其它支付错误
                [self presentFailureTips:LOCALIZATION(@"未知错误")];
                break;
        }
    }];
}

// 在服务器获取订单信息, 避免本地与服务器数据不同步, 数据出错
- (void)getResultWithOrderId:(NSString *)orderId
{
    [[OrderRequest sharedInstance] getOrderResultWithOrderId:orderId type:ENUM_PayPurposeRecharge completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            NSArray *array = [OrderModel mj_objectArrayWithKeyValuesArray:object];
            OrderModel *order = array.firstObject;
            [self paySuccessWithOrder:order];
        }
    }];
}

#pragma mark - 属性

- (UICollectionViewFlowLayout *)layout
{
    if (!_layout) {
        _layout = [[UICollectionViewFlowLayout alloc] init];
        _layout.minimumLineSpacing = kSpace;
        _layout.minimumInteritemSpacing = kSpace;
        _layout.scrollDirection = UICollectionViewScrollDirectionVertical;
        _layout.sectionInset = UIEdgeInsetsMake(0, kSpace, kSpace, kSpace);
    }
    return _layout;
}

- (UICollectionView *)collectionView
{
    if (!_collectionView) {
        _collectionView = [[UICollectionView alloc] initWithFrame:self.view.frame collectionViewLayout:self.layout];
        _collectionView.delegate = self;
        _collectionView.dataSource = self;
        _collectionView.scrollEnabled = NO;
        [self.view addSubview:_collectionView];
    }
    return _collectionView;
}

- (NSMutableArray *)arrRechargeType
{
    if (_arrRechargeType == nil) {
        _arrRechargeType = [NSMutableArray array];
    }
    return _arrRechargeType;
}

- (NSArray *)arrRechargeNumb
{
    if (_arrRechargeNumb == nil) {
        _arrRechargeNumb = [NSArray array];
    }
    return _arrRechargeNumb;
}

- (NSArray *)arrPay
{
    _arrPay = @[@{@"type": @"balance", @"price": @([UserRequest sharedInstance].user.virtualCurrency)},
                @{@"type": @"pay"    , @"price": _payPrice - [UserRequest sharedInstance].user.virtualCurrency > 0 ? @(_payPrice - [UserRequest sharedInstance].user.virtualCurrency ) : @(0)}];
    return _arrPay;
}

@end
