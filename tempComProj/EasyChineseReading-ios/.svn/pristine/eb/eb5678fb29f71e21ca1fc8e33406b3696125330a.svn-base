//
//  ECRBookFormViewController.m
//  EasyChineseReading-ios
//
//  Created by Peanut Lee on 2017/9/27.
//  Copyright © 2017年 retech. All rights reserved.
//

// 测试余额,便于修改, 测试后删除
#define yue_test 50

#import "ECRBookFormViewController.h"
#import "ECRPaymentPreviousView.h"
#import "ECRBookFormTopView.h"
#import "ECRPpvPirceView.h"
#import "ECRPpvScoreView.h"
#import "ECRTopupFieldView.h"
#import "ECRFullMinusRollView.h"
#import "ECRFullminusTableViewCell.h"
#import "ECRFullminusModel.h"
#import "ECRShoppingCarModel.h"
//#import "ECRFullminusRowModel.h"
#import "ECRRowObject.h"
#import "ECRPayDoneController.h"
#import "UVirtualCurrencyRechargeVC.h"
#import "OrderModel.h"
#import "ECRRgButton.h"
#import "ECRVirScoreRateModel.h"

static NSString *btBtnTitle = @"返回购物车";
static NSString *pyBtnTitle = @"支付";
//static NSString *pyBtnTitleZero= @"充值并购买";//
static NSString *fullminusCell = @"ECRFullminusTableViewCell";
//static CGFloat  cellH = 130;

@interface ECRBookFormViewController ()<
UITableViewDataSource,
UITableViewDelegate
//ECRFullminusTableViewCellDelegate
>

//1. 可用的满减卷 — 以供用户选择满减
@property (strong,nonatomic) NSDictionary *avaJuan;
//2. 所有满减卷 — 用来展示给用户哪些能使用，哪些不能
@property (strong,nonatomic) NSMutableArray<ECRFullminusModel *> *allJuan;//

@property (weak,nonatomic) UIColor *bbBtnBorderColor;//
//@property (strong,nonatomic) UIScrollView *scrollView;//
@property (strong,nonatomic) UIButton *backTosc;//
@property (strong,nonatomic) UIButton *pay;//

@property (strong,nonatomic) ECRBookFormTopView *btv;//
@property (strong,nonatomic) ECRPaymentPreviousView *ppv;//

@property (strong,nonatomic) NSArray *coupons;//
@property (assign,nonatomic) CGFloat oriPrice;// 总价原价

@property (strong,nonatomic) NSMutableArray<ECRFullminusModel *> *usedJuan;// 用户选择使用的满减卷模型

@property (assign,nonatomic) CGFloat usedScore;// 最终抵扣积分
@property (assign,nonatomic) CGFloat avaScore;// 最高可抵扣积分

@end

@implementation ECRBookFormViewController

- (void)requestAllJuan{
    /// 请求满减卷
    [[ECRDataHandler sharedDataHandler] fullminusListWithSuccess:^(id object) {
//        self.allJuan = object;
        // 过滤当前可用的满减卷
        NSMutableDictionary *dictM = [NSMutableDictionary dictionaryWithCapacity:10];
        [object enumerateObjectsUsingBlock:^(ECRFullminusModel * _Nonnull juan, NSUInteger idx_juan, BOOL * _Nonnull stop_juan) {
            juan.abtPrice = 0;
            
            [self.tickedArray enumerateObjectsUsingBlock:^(ECRShoppingCarModel * _Nonnull carModel, NSUInteger idx_carModel, BOOL * _Nonnull stop_carModel) {
                if (carModel.fullminusType == juan.fullminusType.integerValue) {
                    juan.abtPrice += carModel.price;
                    //                    NSLog(@"type%ld -- _abtPrice: %f -- 书籍价格: %f",juan.fullminusType.integerValue,juan.abtPrice,carModel.price);
                    if (juan.abtPrice > juan.fullMoney.floatValue) {
                        dictM[[NSString stringWithFormat:@"%ld",juan.fullminusType.integerValue]] = juan;
                    }
                }
                
            }];
        }];
        
        self.avaJuan = dictM.copy;// 必须先设置 avaJuan
        self.allJuan = [NSMutableArray arrayWithArray:object];
        
    } failure:^(NSString *msg) {
        
    } commenFailure:^(NSError *error) {
        
    }];
}

- (void)setAllJuan:(NSMutableArray<ECRFullminusModel *> *)allJuan{
    _allJuan = allJuan;
    // MARK: 全部 满减juan
    // 设置allJuan 中 juan 的isAva
    [self.allJuan enumerateObjectsUsingBlock:^(ECRFullminusModel * _Nonnull juan, NSUInteger idx_juan, BOOL * _Nonnull stop_juan) {
//        NSLog(@"订单明细juan.type -- %ld",juan.fullminusType.integerValue);
        juan.isAva = NO;// 默认为 NO，只有当 avaJuan中有该类型的juan时，才将isAva设置为YES
        [self.avaJuan.allKeys enumerateObjectsUsingBlock:^(id  _Nonnull key, NSUInteger idx_key, BOOL * _Nonnull stop_key) {
            ECRFullminusModel *avaJuan = _avaJuan[key];
            if (avaJuan.fullminusType == juan.fullminusType) {
                juan.isAva = YES;
            }
//            NSLog(@"排序前juan.ava -- %ld",juan.isAva);
        }];
    }];
    
    // MARK: 将可用的优惠券排到最前面
    NSInteger n = self.allJuan.count;
    NSInteger i, j;
    ECRFullminusModel *tempModel;
    for (j = 0; j < n - 1; j++)
        for (i = 0; i < n - 1 - j; i++){
            ECRFullminusModel *model_i = self.allJuan[i];
            ECRFullminusModel *model_i_next = self.allJuan[i+1];
            if(model_i.isAva < model_i_next.isAva){// 如果
                tempModel = model_i;
                [self.allJuan replaceObjectAtIndex:i withObject:model_i_next];
                [self.allJuan replaceObjectAtIndex:(i + 1) withObject:tempModel];
            }
        }
    [self.allJuan enumerateObjectsUsingBlock:^(ECRFullminusModel * _Nonnull juan, NSUInteger idx_juan, BOOL * _Nonnull stop_juan) {
//        NSLog(@"排序后juan.ava -- %ld",juan.isAva);
    }];
    
    NSArray *arr = [[ECRMultiObject sharedInstance] singleLineDoubleModelWithOriginArr:self.allJuan];
    [arr enumerateObjectsUsingBlock:^(ECRRowObject *  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
    }];
    self.coupons = arr;
    [self.ppv.fullMinusView.tableView reloadData];
}
- (void)setTickedArray:(NSArray<ECRShoppingCarModel *> *)tickedArray{
    _tickedArray = tickedArray;
    // MARK: 全部商品
    
}
- (void)setTickedPrice:(CGFloat)tickedPrice{
    _tickedPrice = tickedPrice;
    // MARK: 商品总价
    self.btv.priceTotal = [NSString stringWithFormat:@"%.2f",tickedPrice];
    
    [ECRDataHandler selectCoinrateSuccess:^(id object) {
        NSLog(@"ECRVirScoreRateModel -- %@",object);
        NSArray *arr = object;
        if (arr == nil) {
            
        }else{
            ECRVirScoreRateModel *model = [ECRVirScoreRateModel mj_objectWithKeyValues:arr[0]];
            NSLog(@"model.integralrate -- %@",model.integralrate);
            NSLog(@"model.integralpercent.integerValue -- %@",model.integralpercent);
            
            // MARK: 计算积分可抵扣的 最高值
            _avaScore = tickedPrice * (model.integralpercent.integerValue * 0.01) * (model.integralrate.integerValue);
            if (_avaScore > [ECRMultiObject userScore]) {
                _avaScore = [ECRMultiObject userScore];
            }else{
            }
            self.ppv.scoreCoun.avaScore = _avaScore;
            self.ppv.scoreCoun.integralrate = model.integralrate.integerValue;
        }
    } failure:^(NSString *msg) {
        
    } commenFailure:^(NSError *error) {
        
    }];
}
- (void)setAvaJuan:(NSDictionary *)avaJuan{
    _avaJuan = avaJuan;
    // MARK: 可用juan 字典
}

- (void)backClick:(UIButton *)sender{
    // 返回购物车
    [self baseViewControllerDismiss];
}

// MARK: 点击支付(或充值并购买)
- (void)payClick:(UIButton *)sender{
    if ([self yueEnough]) {
        /// 支付
        /// 余额充足,直接支付
        NSMutableArray *bookIds = [NSMutableArray new];
        [self.tickedArray enumerateObjectsUsingBlock:^(ECRShoppingCarModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
            [bookIds addObject:@(obj.bookId)];
        }];
        [ECRDataHandler yuePayWithBookIds:bookIds.copy juanIds:[self juanIds] totalMoney:self.oriPrice finalTotalMoney:self.tickedPrice score:_usedScore success:^(id object) {
            
            [UserRequest sharedInstance].user.virtualCurrency -= self.tickedPrice;
            UserRequest.sharedInstance.user.score -= _usedScore;
            [[UserRequest sharedInstance] saveCache];
            [[NSOperationQueue mainQueue] addOperationWithBlock:^{
                [self presentSuccessTips:LOCALIZATION(@"支付成功")];
            }];
            if ([self.delegate respondsToSelector:@selector(payDoneCallback:)]) {
                [self.delegate payDoneCallback:self];
            }
            [self baseViewControllerDismiss];
            
        } failure:^(NSString *msg) {
            
        } commenFailure:^(NSError *error) {
            
        }];
    }else{
        /// 充值
        UVirtualCurrencyRechargeVC *recharge = [UVirtualCurrencyRechargeVC loadFromStoryBoard:@"User"];
        recharge.payPurpose = ENUM_PayPurposeBuy;
        /// 数据
        OrderModel *order = [OrderModel new];
        order.orderId = [NSString stringWithFormat:@"%ld",self.orderId];
        order.books = self.tickedArray;/// 所有要买的书籍
        order.totalmoney = self.oriPrice;/// 商品总价(未减之前)
        order.fullMinusCost = [self juanIds];/// 使用的满减卷ids
        order.finalTotalMoney = self.tickedPrice;/// 减完之后 所需支付的金额
        NSMutableArray *arrm = [NSMutableArray arrayWithCapacity:10];
        for (NSInteger i = 0; i < self.usedJuan.count; i++) {
            ECRFullminusModel *model = self.usedJuan[i];
            [arrm addObject:[NSString stringWithFormat:@"%@",model.seqid]];
        }
        //    NSLog(@"order.couponids -- %@",order.couponIds);
        //    NSString *string = [order.couponIds componentsJoinedByString:@","];
        //    NSLog(@"string -- %@",string);
        // TODO: 抵扣积分
        order.score = _avaScore;
        //        NSLog(@"orderid -- %@",order.orderId);
        //        NSLog(@"orderidClass -- %@",[order.orderId class]);
        //        NSLog(@"totalmoney -- %f",order.totalmoney);
        //        NSLog(@"fullMinusCost -- %f",order.fullMinusCost);
        //        NSLog(@"finalTotalMoney -- %f",order.finalTotalMoney);
        recharge.order = order;
        [self.navigationController pushViewController:recharge animated:YES];
    }

}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupUI];
    [self requestAllJuan];
}


#pragma mark - UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.coupons.count;
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    ECRFullminusTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:fullminusCell];
    ECRRowObject *model = self.coupons[indexPath.row];
//    cell.delegate = self;
    cell.inx = indexPath;
    cell.rowModel = model;
    return cell;
}
#pragma mark - UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    ECRFullminusTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:fullminusCell];
    return cell.cellHeight;
}
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    
}
- (void)textDependsLauguage{
    self.title = [LGPChangeLanguage localizedStringForKey:@"订单明细"];
    btBtnTitle = [LGPChangeLanguage localizedStringForKey:@"返回购物车"];
//    self.tickedPrice = 0;
    if ([self yueEnough]) {
        // 余额充足显示 支付
        pyBtnTitle = [LGPChangeLanguage localizedStringForKey:@"支付"];
    }else{
        // 余额不足显示 充值并购买
        pyBtnTitle = [LGPChangeLanguage localizedStringForKey:@"充值并购买"];
    }
}

- (void)setupUI{
    [self textDependsLauguage];
    _oriPrice = 0;
    _usedScore = 0;
    _avaScore = 0;
    [self.view addSubview:self.backTosc];
    [self.view addSubview:self.pay];
    
    [self.view addSubview:self.btv];
    [self.view addSubview:self.ppv];
    
    [self.btv mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view.mas_top);
        make.left.equalTo(self.view.mas_left);
        make.bottom.equalTo(self.ppv.mas_top);
        make.right.equalTo(self.view.mas_right);
        make.height.equalTo(@50);
        make.width.equalTo(@(Screen_Width));
    }];

    [self.ppv mas_makeConstraints:^(MASConstraintMaker *make) {
        make.width.equalTo(@(Screen_Width));
        make.left.equalTo(self.view.mas_left);
        make.right.equalTo(self.view.mas_right);
        make.bottom.equalTo(self.backTosc.mas_top);
    }];
    CGFloat heightBB = 50;
    [self.backTosc mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.ppv.mas_bottom);
        make.left.equalTo(self.view.mas_left);
        make.bottom.equalTo(self.view.mas_bottom);
        make.height.equalTo(@(heightBB));
        make.width.equalTo(@(Screen_Width / 2));
    }];
    [self.pay mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.equalTo(self.view.mas_right);
        make.width.equalTo(@(Screen_Width / 2 + 1));
        make.top.equalTo(self.backTosc.mas_top);
        make.bottom.equalTo(self.backTosc.mas_bottom);
    }];
    
    self.ppv.fullMinusView.tableView.dataSource = self;
    self.ppv.fullMinusView.tableView.delegate = self;
    [self.ppv.fullMinusView.tableView registerNib:[UINib nibWithNibName:fullminusCell bundle:nil] forCellReuseIdentifier:fullminusCell];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(juanClickNotification:) name:ECRFullminusJuanViewClickNotification object:nil];
    
    // 用户余额
    self.ppv.priceView.priceYu = [NSString stringWithFormat:@"%f",[ECRMultiObject userYue]];
    /// 用户积分
    self.ppv.scoreCoun.priceYu = [ECRMultiObject userScore];
    
    [self.ppv.scoreCoun.userScore.btn addTarget:self action:@selector(useScore:) forControlEvents:UIControlEventTouchUpInside];
}
- (void)useScore:(UIButton *)sender{
    if (sender.selected) {/// 使用积分
        _usedScore = _avaScore;
    }else{
        _usedScore = 0;
    }
}
// MARK: 可用满减卷点击事件
- (void)juanClickNotification:(NSNotification *)notification{
    NSDictionary *userInfo = notification.userInfo;
    ECRFullminusModel *model = userInfo[@"model"];//
        for (NSInteger i = 0; i < self.allJuan.count; i++) {
            ECRFullminusModel *modelInArray = self.allJuan[i];
            if (modelInArray == model) {
                if (modelInArray.isSelected) {
                    modelInArray.isSelected = NO;
                    [self.usedJuan removeObject:modelInArray];
                }else{
                    modelInArray.isSelected = YES;
                    [self.usedJuan addObject:modelInArray];
                }
            }else{
                if (modelInArray.fullminusType.integerValue == model.fullminusType.integerValue) {
                    modelInArray.isSelected = NO;
                    [self.usedJuan removeObject:modelInArray];
                }
            }
        }
    NSLog(@"usedjuan -- %@",self.usedJuan);
    self.tickedPrice = self.oriPrice - model.minusMoney.floatValue;
    [self.ppv.fullMinusView.tableView reloadData];
}

- (ECRBookFormTopView *)btv{
    if (_btv == nil) {
        _btv = [[ECRBookFormTopView alloc] init];
    }
    return _btv;
}
- (ECRPaymentPreviousView *)ppv{
    if (_ppv == nil) {
        _ppv = [[ECRPaymentPreviousView alloc] init];
        
    }
    return _ppv;
}
- (UIButton *)backTosc{
    if (_backTosc == nil) {
        _backTosc = [[UIButton alloc] init];
        _backTosc.layer.borderWidth = 1;
        _backTosc.layer.borderColor = self.bbBtnBorderColor.CGColor;
        [_backTosc setTitle:btBtnTitle forState:UIControlStateNormal];
        [_backTosc setTitleColor:[UIColor cm_mainColor] forState:UIControlStateNormal];
        [_backTosc.titleLabel setFont:[UIFont systemFontOfSize:14]];
        [_backTosc setBackgroundColor:[UIColor whiteColor]];
        [_backTosc addTarget:self action:@selector(backClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _backTosc;
}
- (UIButton *)pay{
    if (_pay == nil) {
        _pay = [[UIButton alloc] init];
        _pay.layer.borderWidth = 1;
        _pay.layer.borderColor = self.bbBtnBorderColor.CGColor;
        [_pay setTitle:pyBtnTitle forState:UIControlStateNormal];
        [_pay setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_pay.titleLabel setFont:[UIFont systemFontOfSize:14]];
        [_pay setBackgroundColor:[UIColor cm_mainColor]];
        [_pay addTarget:self action:@selector(payClick:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _pay;
}
- (UIColor *)bbBtnBorderColor{
    if (_bbBtnBorderColor == nil) {
        _bbBtnBorderColor = [UIColor cm_lineColor_D9D7D7_1];
    }
    return _bbBtnBorderColor;
}
- (CGFloat)oriPrice{
    if (_oriPrice == 0) {
        _oriPrice = 0;
        for (NSInteger i = 0; i < self.tickedArray.count; ++i) {
            ECRShoppingCarModel *model = self.tickedArray[i];
            model.isTick = YES;
            _oriPrice += model.price;
        }
    }
    return _oriPrice;
}
- (NSMutableArray<ECRFullminusModel *> *)usedJuan{
    if (_usedJuan == nil) {
        _usedJuan = [NSMutableArray new];
    }
    return _usedJuan;
}

- (void)dealloc{
    for (NSInteger i = 0; i < self.allJuan.count; i++) {
        ECRFullminusModel *modelInArray = self.allJuan[i];
        if (modelInArray.isAva) {
            modelInArray.isSelected = NO;
        }
    }
}

- (BOOL)yueEnough{
    return [ECRMultiObject userYue] >= self.tickedPrice;
}

- (NSArray *)juanIds{
    NSMutableArray *fullMinusCost = [NSMutableArray new];
    [self.usedJuan enumerateObjectsUsingBlock:^(ECRFullminusModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        [fullMinusCost addObject:obj.seqid];
    }];
    return fullMinusCost.copy;
}

@end




