//
//  UTaskSystemVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 2017/9/11.
//  Copyright © 2017年 lee. All rights reserved.
//

#import "UTaskSystemVC.h"

#import "UTaskCollectionViewCell.h"

static CGFloat const kCellSpace = 20.f;

@interface UTaskSystemVC () <
UICollectionViewDelegate,
UICollectionViewDataSource,
UICollectionViewDelegateFlowLayout
>

@property (strong, nonatomic) UICollectionView *collectionView;
@property (strong, nonatomic) UICollectionViewFlowLayout *layout;

@property (nonatomic, strong) NSArray        *arrTasks;        // 全部任务
@property (nonatomic, strong) NSMutableArray *arrEveryDayTask; // 日常任务
@property (nonatomic, strong) NSMutableArray *arrLongTimeTask; // 成就任务

@property (nonatomic, strong) TaskModel *task;              // 正在获取积分的任务
@property (nonatomic, assign) ENUM_TaskType taskType;       // 任务类别

@property (strong, nonatomic) ZSegment *segment; 

@end

@implementation UTaskSystemVC

- (void)viewDidLoad {
    [super viewDidLoad];
    [self configSystemTaskView];
    [self getTasks];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)updateSystemLanguage
{
    [_collectionView reloadData];
}

#pragma mark - 配置界面

- (void)configSystemTaskView
{
    _arrLongTimeTask = [NSMutableArray array];
    _arrEveryDayTask = [NSMutableArray array];
    _arrTasks        = [NSArray array];
    
    _taskType = ENUM_TaskTypeEveryDay;
    
    [self.view addSubview:self.collectionView];

    _segment = [[ZSegment alloc] initWithFrame:CGRectMake(0, 0, Screen_Width, cHeaderHeight_44) leftTitle:LOCALIZATION(@"日常任务") rightTitle:LOCALIZATION(@"我的成就") selectedColor:[UIColor cm_mainColor] sliderColor:[UIColor clearColor]];
    [self.view addSubview:_segment];
    
    WeakSelf(self)
    _segment.selectedLeft = ^{
        weakself.taskType = ENUM_TaskTypeEveryDay;
        [weakself.collectionView reloadData];
    };
    _segment.selectedRight = ^{
        weakself.taskType = ENUM_TaskTypeLongTime;
        [weakself.collectionView reloadData];
    };
    
}

#pragma mark - 获取数据

- (void)getTasks
{
    [[TaskRequest sharedInstance] getTaskListWithCompletion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentSuccessTips:error.message];
        }
        else {
            self.arrTasks = [TaskModel mj_objectArrayWithKeyValuesArray:object];
        }
    }];
}

- (void)setArrTasks:(NSArray *)arrTasks
{
    [arrTasks enumerateObjectsUsingBlock:^(TaskModel *task, NSUInteger idx, BOOL * _Nonnull stop) {
        if (task.taskTimes == 0) {
            [_arrEveryDayTask addObject:task];
        }
        else {
            [_arrLongTimeTask addObject:task];
        }
        if (idx == arrTasks.count - 1) {
            [self.collectionView reloadData];
        }
    }];
}

#pragma mark - collectionView data source

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return _taskType == ENUM_TaskTypeEveryDay ? _arrEveryDayTask.count : _arrLongTimeTask.count;
}

- (__kindof UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    UTaskCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([UTaskCollectionViewCell class]) forIndexPath:indexPath];
//    cell.selectedIndex = indexPath.row;
    cell.data = _taskType == ENUM_TaskTypeEveryDay ? _arrEveryDayTask[indexPath.row] : _arrLongTimeTask[indexPath.row];
    return cell;
}

#pragma mark - collectionView delegate

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    TaskModel *task = _taskType == ENUM_TaskTypeEveryDay ? _arrEveryDayTask[indexPath.row] : _arrLongTimeTask[indexPath.row];
    if (task.status == ENUM_TaskStatusTypeDone) {
        [self getTaskAwardWithTask:task index:indexPath.row];
    }
}

- (void)getTaskAwardWithTask:(TaskModel *)task index:(NSInteger)index
{
    if (task.status == ENUM_TaskStatusTypeDone) {
        _task = task;
        [[TaskRequest sharedInstance] getTaskAwardWithTask:_task
                                                completion:^(id object, ErrorModel *error) {
                                                    if (error) {
                                                        [self presentFailureTips:error.message];
                                                    }
                                                    else {
                                                        [self getIntegralSuccessWithTask:_task index:index];
                                                    }
                                                }];
    }
//    else if (task.status == ENUM_TaskStatusTypeGetIntegral) {
//        
//    }
//    else {
//        [self presentFailureTips:@"任务未完成, 请完成后领取"];
//    }
}

- (void)getIntegralSuccessWithTask:(TaskModel *)task index:(NSInteger)index
{
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:index inSection:0];
    UTaskCollectionViewCell *cell = (UTaskCollectionViewCell *)[_collectionView cellForItemAtIndexPath:indexPath];
    task.status = ENUM_TaskStatusTypeGetIntegral;
    [cell getTaskIntegral];
}

#pragma mark - 属性

- (UICollectionView *)collectionView
{
    if (_collectionView == nil) {
        _collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, cHeaderHeight_44, Screen_Width, self.view.height - cHeaderHeight_44) collectionViewLayout:self.layout];
        
        _collectionView.delegate = self;
        _collectionView.dataSource = self;
        
        _collectionView.backgroundColor = [UIColor whiteColor];
        
        [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UTaskCollectionViewCell class]) bundle:nil] forCellWithReuseIdentifier:NSStringFromClass([UTaskCollectionViewCell class])];
    }
    return _collectionView;
}

- (UICollectionViewFlowLayout *)layout
{
    if (_layout == nil) {
        _layout = [[UICollectionViewFlowLayout alloc] init];
        
        _layout.minimumLineSpacing      = kCellSpace;
        _layout.minimumInteritemSpacing = kCellSpace;
        _layout.sectionInset            = UIEdgeInsetsMake(kCellSpace, kCellSpace, kCellSpace, kCellSpace);
        _layout.itemSize                = isPad ? CGSizeMake((Screen_Width - kCellSpace*5)/4, (Screen_Width - kCellSpace*5)/4) : CGSizeMake((Screen_Width - kCellSpace*3)/2, (Screen_Width - kCellSpace*3)/2);
    }
    return _layout;
}

@end
