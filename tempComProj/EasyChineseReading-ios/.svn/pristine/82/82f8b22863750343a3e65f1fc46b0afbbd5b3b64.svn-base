//
//  USetVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 17/8/30.
//  Copyright © 2017年 lee. All rights reserved.
//

#import "UserSetVC.h"

#import "SDImageCache.h"

#import "UserCommentVC.h"
#import "UserSetSkinVC.h"
#import "UserSetLanguageVC.h"
#import "UserSetAboutVC.h"

@interface UserSetVC ()<UIActionSheetDelegate>

@property (strong, nonatomic) IBOutlet UILabel *lblCacheSize;
@property (strong, nonatomic) IBOutlet UIButton *btnLogout;

@property (weak, nonatomic) IBOutlet UISwitch *switchAllow;
@property (weak, nonatomic) IBOutlet UISwitch *switchWifi;

@end

@implementation UserSetVC

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    [self configSetView];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -
#pragma mark 配置设置界面

- (void)configSetView
{
    self.title = @"设置";
    _lblCacheSize.text = [NSString stringWithFormat:@"%.1f M", [self getCacheSize]];
    
    _btnLogout.layer.masksToBounds = YES;
    _btnLogout.layer.cornerRadius = _btnLogout.height/2;
    
    [_btnLogout setBackgroundColor:[UIColor cm_purpleColor_82056B_1]];
    [_btnLogout setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    
    _switchWifi.onTintColor = [UIColor cm_purpleColor_82056B_1];
    _switchAllow.onTintColor = [UIColor cm_purpleColor_82056B_1];
}

#pragma mark -
#pragma mark UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    // 根据 cellID 获取 执行方法，要求 id与执行方法必须一样 如果错误 则找不到该方法 崩溃
    UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    if (![NSString isEmpty:cell.reuseIdentifier]) {
        SEL method = NSSelectorFromString(cell.reuseIdentifier);
        [self performSelector:method withObject:nil afterDelay:0];
    }
}

#pragma mark -
#pragma mark UIActionSheetDelegate

- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 0)
        [self clearCache];
}

#pragma mark -
#pragma mark 设置操作


/**
 允许好友查看我的信息
 */
- (IBAction)changeSwitchAllow:(id)sender {
    
}

/**
 仅在wifi下同步
 */
- (IBAction)changeSwitchWifi:(id)sender {
    
}

/** 意见反馈 */
- (void)comment
{
    [self pushToViewControllerWithStoryBoard:@"User" withStoryBoardId:NSStringFromClass([UserCommentVC class])];
}

/** 清理缓存 */
- (void)clear
{
    UIActionSheet * actionSheet = [[UIActionSheet alloc] initWithTitle:@"清除所有的缓存？" delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:@"确定" otherButtonTitles:nil, nil];
    [actionSheet showInView:self.view];
}

/** 更新 -- 跳转 appStore */
- (void)update
{
    // TODO: 更新appid
    NSString *app_id = @"";
    //去appstore中更新
    NSString *appStoreLink = [NSString stringWithFormat:@"http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?id=%@&pageNumber=0&sortOrdering=2&type=Purple+Software&mt=8", app_id];
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:appStoreLink]];
}

/** 仅在wifi情况下同步电子书 */
- (void)wifi
{
    // TODO: 同步电子书
}

/** 允许好友查看我的信息 -- 个人信息中 Ta 正在读的书是否显示*/
- (void)allow
{
    // TODO: 允许好友查看
}

/** 关于 */
- (void)about
{
    [self pushToViewControllerWithStoryBoard:@"User" withStoryBoardId:NSStringFromClass([UserSetAboutVC class])];
}

/** 语言切换 */
- (void)language
{
    [self pushToViewControllerWithStoryBoard:@"User" withStoryBoardId:NSStringFromClass([UserSetLanguageVC class])];
}

/** 皮肤切换 */
- (void)skin
{
    [self pushToViewControllerWithStoryBoard:@"User" withStoryBoardId:NSStringFromClass([UserSetSkinVC class])];
}

/** 退出 */
- (void)logout
{
    // TODO: 缺少退出操作及接口
    
    // 清楚缓存、发布退出通知
    [[UserRequest sharedInstance] signout];
}

- (IBAction)click_btnLogout:(id)sender {
    [self logout];
}

#pragma mark 获取缓存

/** 获取缓存大小 */
- (float)getCacheSize
{
    NSString *cachePath = [NSSearchPathForDirectoriesInDomains (NSCachesDirectory, NSUserDomainMask, YES) firstObject];
    float m_file_size = [self folderSizeAtPath:cachePath];
    
    NSInteger byteImageData = [[SDImageCache sharedImageCache] getSize];
    float m_image_size = byteImageData / (1024.f * 1024.f);
    
    return m_file_size + m_image_size;
}

/** 根据路径获取文件夹大小 */
- (float)folderSizeAtPath:( NSString *) folderPath{
    
    NSFileManager * manager = [NSFileManager defaultManager];
    if (![manager fileExistsAtPath:folderPath]) return 0 ;
    NSEnumerator *childFilesEnumerator = [[manager subpathsAtPath:folderPath] objectEnumerator];
    NSString * fileName;
    long long folderSize = 0 ;
    while ((fileName = [childFilesEnumerator nextObject]) != nil ){
        //获取文件全路径
        NSString * fileAbsolutePath = [folderPath stringByAppendingPathComponent:fileName];
        folderSize += [self fileSizeAtPath:fileAbsolutePath];
    }
    
    return folderSize/( 1024.0 * 1024.0);
}

- (long long)fileSizeAtPath:( NSString *) filePath{
    NSFileManager * manager = [NSFileManager defaultManager];
    if ([manager fileExistsAtPath:filePath]){
        return [[manager attributesOfItemAtPath:filePath error:nil] fileSize];
    }
    return 0;
}

#pragma mark 清除缓存

- (void)clearCache
{
    [self presentLoadingTips:@"正在清理缓存, 请稍后.."];
    
    [[SDImageCache sharedImageCache] clearDiskOnCompletion:^{
        dispatch_async(dispatch_get_global_queue(0, 0), ^{
            
            NSString *cachePath = [NSSearchPathForDirectoriesInDomains (NSCachesDirectory, NSUserDomainMask, YES ) firstObject];
            NSArray *files = [[NSFileManager defaultManager ] subpathsAtPath :cachePath];
            //NSLog ( @"cachpath = %@" , cachePath);
            for ( NSString *p in files) {
                NSError *error = nil ;
                //获取文件全路径
                NSString *fileAbsolutePath = [cachePath stringByAppendingPathComponent:p];
                
                if ([[NSFileManager defaultManager] fileExistsAtPath:fileAbsolutePath]) {
                    [[NSFileManager defaultManager] removeItemAtPath:fileAbsolutePath error :&error];
                }
            }
            
            dispatch_async(dispatch_get_main_queue(), ^{
                [self dismissTips];
                [self presentSuccessTips:@"清理完成！"];
                //读取缓存大小
                _lblCacheSize.text = [NSString stringWithFormat:@"%.1f M",[self getCacheSize]];
            });
        });
    }];
}

@end
