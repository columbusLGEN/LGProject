
//
//  UserTicketManager.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 2017/9/28.
//  Copyright © 2017年 retech. All rights reserved.
//

#import "UserTicketManager.h"

#import "UTicketCollectionViewCell.h"

#import "UserTicketVC.h"
#import "UserTicketListVC.h"
#import "UserTicketCenterVC.h"
#import "UserTicketCorrespondBooksVC.h"
#import "UVirtualCurrencyRechargeVC.h"

static CGFloat const kCellHeight   = 108.f; // cell 高度
static CGFloat const kCellSpace    = 36.f;  // cell 边距

@interface UserTicketManager ()<UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>

@property (weak, nonatomic) IBOutlet UIView *viewHeader;

@property (weak, nonatomic) IBOutlet UILabel *lblDescLeft;
@property (weak, nonatomic) IBOutlet UILabel *lblRange;
@property (weak, nonatomic) IBOutlet UILabel *lblEndTime;

@property (weak, nonatomic) IBOutlet UIButton *btnPay;

@property (weak, nonatomic) IBOutlet UIView *viewExchange;  // 兑换
@property (weak, nonatomic) IBOutlet UIView *viewTickets;   // 我的
@property (weak, nonatomic) IBOutlet UIView *viewShowTicket;// 卡券中心

@property (weak, nonatomic) IBOutlet UILabel *lblExchange;  // 兑换
@property (weak, nonatomic) IBOutlet UILabel *lblTickets;   // 我的
@property (weak, nonatomic) IBOutlet UILabel *lblShowTicket;// 卡券中心

@property (weak, nonatomic) IBOutlet UIView *viewExchangeLine;
@property (weak, nonatomic) IBOutlet UIView *viewTicketsLine;

@property (strong, nonatomic) IBOutlet UICollectionView *collectionView; // 列表
@property (strong, nonatomic) UICollectionViewFlowLayout *layout; // collecition 布局

@property (nonatomic, strong) UVirtualCurrencyRechargeVC *rechargeVC; // 全平台包月

@property (strong, nonatomic) NSMutableArray *arrTickets;         // 卡券数组

@end

@implementation UserTicketManager

- (void)viewDidLoad {
    [super viewDidLoad];
    [self configTickManagerView];
    [self getTickets];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)updateSystemLanguage
{
    self.title = LOCALIZATION(@"会员中心");
    
    [_btnPay setTitle:LOCALIZATION(@"购买") forState:UIControlStateNormal];
    _lblDescLeft.text = LOCALIZATION(@"VIP租阅");
    _lblRange.text    = [NSString stringWithFormat:@" -%@", LOCALIZATION(@"全平台资源")];
    _lblEndTime.text  = [NSString stringWithFormat:@"%@ %@", LOCALIZATION(@"到期"), @"2020-12-30 23:59:59"];
    _lblExchange.text = LOCALIZATION(@"卡券兑换");
    _lblTickets.text  = LOCALIZATION(@"我的卡券");
    _lblShowTicket.text = LOCALIZATION(@"领券中心");
}

- (void)configTickManagerView
{
    _lblRange.textColor    = [UIColor cm_blackColor_666666_1];
    _lblDescLeft.textColor = [UIColor cm_blackColor_666666_1];
    _lblEndTime.textColor  = [UIColor cm_orangeColor_BB7435_1];
    
    _lblExchange.textColor   = [UIColor cm_blackColor_333333_1];
    _lblTickets.textColor    = [UIColor cm_blackColor_333333_1];
    _lblShowTicket.textColor = [UIColor cm_blackColor_333333_1];
    
    _viewExchangeLine.backgroundColor = [UIColor cm_lineColor_D9D7D7_1];
    _viewTicketsLine.backgroundColor  = [UIColor cm_lineColor_D9D7D7_1];
    
    _lblDescLeft.font = [UIFont systemFontOfSize:cFontSize_16];
    _lblRange.font    = [UIFont systemFontOfSize:cFontSize_14];
    _lblEndTime.font  = [UIFont systemFontOfSize:cFontSize_14];
    
    _btnPay.layer.masksToBounds = YES;
    _btnPay.layer.cornerRadius = _btnPay.height/2;
    _btnPay.layer.borderWidth = 1.f;
    _btnPay.layer.borderColor = [UIColor cm_orangeColor_BB7435_1].CGColor;
    // TODO: 判断是否有全平台租赁
    [_btnPay setTintColor:[UIColor cm_orangeColor_BB7435_1]];
    [_btnPay setTitle:[UserRequest sharedInstance].user.readAllBook ? LOCALIZATION(@"续期") : LOCALIZATION(@"购买") forState:UIControlStateNormal];
    [_btnPay addTarget:self action:@selector(buyAllRead) forControlEvents:UIControlEventTouchUpInside];

    UITapGestureRecognizer *tapExchange   = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(toExchangeTicket)];
    UITapGestureRecognizer *tapTickets    = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(toTickets)];
    UITapGestureRecognizer *tapShowTicket = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(toTicketCenter)];
    
    [_viewExchange   addGestureRecognizer:tapExchange];
    [_viewTickets    addGestureRecognizer:tapTickets];
    [_viewShowTicket addGestureRecognizer:tapShowTicket];
    
    [_collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([UTicketCollectionViewCell class]) bundle:nil] forCellWithReuseIdentifier:NSStringFromClass([UTicketCollectionViewCell class])];
    _collectionView.collectionViewLayout = self.layout;
}

- (void)toExchangeTicket
{
    UserTicketVC *tickVC = [UserTicketVC new];
    [self.navigationController pushViewController:tickVC animated:YES];
}

- (void)toTickets
{
    UserTicketListVC *tickListVC = [UserTicketListVC new];
    [self.navigationController pushViewController:tickListVC animated:YES];
}

- (void)toTicketCenter
{
    UserTicketCenterVC *ticketCenter = [UserTicketCenterVC new];
    ticketCenter.arrTickets = _arrTickets;
    [self.navigationController pushViewController:ticketCenter animated:YES];
}

- (void)buyAllRead
{
    _rechargeVC = [UVirtualCurrencyRechargeVC loadFromStoryBoard:@"User"];
    _rechargeVC.view.frame = CGRectMake(0, 44 + 64, Screen_Width, self.view.height - 64 - 44);
    _rechargeVC.payPurpose = ENUM_PayPurposeAllLease;
    [self.navigationController pushViewController:_rechargeVC animated:YES];
}

#pragma mark - 获取数据

- (void)getTickets
{
    [[UserRequest sharedInstance] getAllTicketesWithCompletion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            self.arrTickets = [TicketModel mj_objectArrayWithKeyValuesArray:object];
            [self.collectionView reloadData];
        }
    }];
}

#pragma mark - UICollectionViewDataSource

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return _arrTickets.count > 4 ? 4 : _arrTickets.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    UTicketCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([UTicketCollectionViewCell class]) forIndexPath:indexPath];
    cell.data = _arrTickets[indexPath.row];
    return cell;
}

#pragma mark - UICollectionViewDelegate

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    TicketModel *ticket = _arrTickets[indexPath.row];
    if (ticket.status == ENUM_TicketStatusHaveNot && ticket.receiveNum < ticket.totalNum)
        [self getTicketWithTicket:ticket indexPath:indexPath];
    else
        [self userTicketWithId:ticket.seqid];
}

#pragma mark - action

- (void)userTicketWithId:(NSInteger)ticketId
{
    UserTicketCorrespondBooksVC *booksVC = [UserTicketCorrespondBooksVC new];
    booksVC.ticketId = ticketId;
    [self.navigationController pushViewController:booksVC animated:YES];
}

- (void)getTicketWithTicket:(TicketModel *)ticket indexPath:(NSIndexPath *)indexPath
{
    [[UserRequest sharedInstance] getTicketWithTicketId:ticket.seqid completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            ticket.status = ENUM_TicketStatusHave;
            ticket.receiveNum += 1;
            UTicketCollectionViewCell *cell = (UTicketCollectionViewCell *)[_collectionView cellForItemAtIndexPath:indexPath];
            cell.data = ticket;
            [_collectionView reloadItemsAtIndexPaths:@[indexPath]];
            [self presentSuccessTips:LOCALIZATION(@"领取成功")];
        }
    }];
}

#pragma mark -

- (UICollectionViewFlowLayout *)layout
{
    if (_layout == nil) {
        _layout = [[UICollectionViewFlowLayout alloc] init];
        
        _layout.minimumLineSpacing      = kCellSpace;
        _layout.minimumInteritemSpacing = kCellSpace;
        _layout.sectionInset            = UIEdgeInsetsMake(kCellSpace, kCellSpace, kCellSpace, kCellSpace);
        _layout.itemSize                = isPad ? CGSizeMake((Screen_Width - kCellSpace * 3)/2, kCellHeight) : CGSizeMake(Screen_Width - kCellSpace * 2, kCellHeight);
    }
    return _layout;
}

- (NSMutableArray *)arrTickets
{
    if (_arrTickets == nil) {
        _arrTickets = [NSMutableArray array];
    }
    return _arrTickets;
}


@end
