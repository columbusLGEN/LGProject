//
//  RegisterWeChatUserVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 2017/10/31.
//  Copyright © 2017年 retech. All rights reserved.
//

#import "RegisterWeChatUserVC.h"

//#import "LTextFieldTableViewCell.h"
#import "LVerifyTableViewCell.h"
#import "RButtonTableViewCell.h"
#import "LPhoneTableViewCell.h"

#import "RegisterSuccessVC.h"
#import "UserInfoAddressVC.h"

@interface RegisterWeChatUserVC ()<
UITableViewDelegate, UITableViewDataSource,
UITextFieldDelegate,
RButtonTableViewCellDelegate,
LVerifyTableViewCellDelegate
>

@property (strong, nonatomic) UITableView *tableView;

@property (strong, nonatomic) NSArray *arrViewConfiguration;   // 界面配置

@property (nonatomic, strong) NSString *password;              // 密码
@property (nonatomic, strong) NSString *rePassword;            // 重复密码
@property (nonatomic, strong) NSString *code;                  // 验证码
@property (strong, nonatomic) NSString *account;               // 账号
@property (strong, nonatomic) NSString *areacode;              // 国家码

@property (nonatomic, assign) BOOL agree;                      // 同意注册条款

@property (strong, nonatomic) NSTimer *timer;                  // 计时器
@property (assign, nonatomic) NSInteger timeDown;              // 倒计时时间

/** 注册类型 */
@property (nonatomic, assign) ENUM_AccountType userType;

@end

@implementation RegisterWeChatUserVC

- (void)viewDidLoad {
    [super viewDidLoad];
    [self configTableView];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)updateSystemLanguage
{
    self.title = LOCALIZATION(@"微信注册");
}

- (void)configTableView
{
    _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, Screen_Width, self.view.height - cHeaderHeight_44 - cHeaderHeight_64) style:UITableViewStyleGrouped];
    _tableView.backgroundColor = [UIColor whiteColor];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    _tableView.rowHeight = UITableViewAutomaticDimension;
    _tableView.estimatedRowHeight = 100;
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    
    [self.view addSubview:_tableView];
    
//    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LTextFieldTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LTextFieldTableViewCell class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LVerifyTableViewCell    class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LVerifyTableViewCell    class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([RButtonTableViewCell    class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([RButtonTableViewCell    class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LPhoneTableViewCell     class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LPhoneTableViewCell     class])];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.arrViewConfiguration.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:_arrViewConfiguration[indexPath.row][@"identify"]];
    cell.data = _arrViewConfiguration[indexPath.row];
    if ([cell isKindOfClass:[RButtonTableViewCell class]]) {
        RButtonTableViewCell *btnCell = (RButtonTableViewCell *)cell;
        btnCell.delegate = self;
    }
    else if ([cell isKindOfClass:[LVerifyTableViewCell class]]) {
        LVerifyTableViewCell *verCell = (LVerifyTableViewCell *)cell;
        verCell.delegate = self;
    }
    else if ([cell isKindOfClass:[LPhoneTableViewCell class]]) {
        LPhoneTableViewCell *pCell = (LPhoneTableViewCell *)cell;
        pCell.selectedAreacode = ^{
            [self toSelectCountry];
        };
    }
    
    [self configTextWithCell:cell];
    return cell;
}

#pragma mark - 选择国家

/**
 选择国家
 */
- (void)toSelectCountry
{
    LPhoneTableViewCell *cell = [_tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];
    UserInfoAddressVC *addressVC = [[UserInfoAddressVC alloc] init];
    addressVC.language = [UserRequest sharedInstance].language;
    addressVC.selectedCountryBlock = ^(CountryModel * country){
        _areacode = country.areacode;
        [cell updateAreacodeWithAreacode:country.areacode];
        
        // 判断是否满足注册条件
        RButtonTableViewCell *cell = (RButtonTableViewCell *)[_tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:1 inSection:0]];
        if ([cell isKindOfClass:[RButtonTableViewCell class]]) {
            [cell updateButtonEnable:_account.length > 0 && _password.length > 0 && _code.length > 0];
        }
    };
    [self.navigationController pushViewController:addressVC animated:YES];
}

#pragma mark - 获取 注册表 textfield 的值

- (void)configTextWithCell:(UITableViewCell *)cell
{
//    LTextFieldTableViewCell *tCell = (LTextFieldTableViewCell *)cell;
    LVerifyTableViewCell    *vCell = (LVerifyTableViewCell *)cell;
    LPhoneTableViewCell     *pCell = (LPhoneTableViewCell *)cell;
//    if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LTextFieldTableViewCell class])]) {
//        tCell.txtfContent.delegate = self;
//        [tCell.txtfContent addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
//    }
//    else
    if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LVerifyTableViewCell class])]) {
        vCell.txtfContent.delegate = self;
        [vCell.txtfContent addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
    }
    else if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LPhoneTableViewCell class])]) {
        pCell.txtfAccount.delegate = self;
        [pCell.txtfAccount addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
    }
}

- (void)textFieldWithText:(UITextField *)textField
{
    switch (textField.tag) {
        case 10000: _account = textField.text; break;
        case 10003: _code = textField.text;    break;
        default:
            break;
    }
    
    // 判断是否满足注册条件
    RButtonTableViewCell *cell = (RButtonTableViewCell *)[_tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:1 inSection:0]];
    if ([cell isKindOfClass:[RButtonTableViewCell class]]) {
        [cell updateButtonEnable:_account.length > 0 && _password.length > 0 && _code.length > 0];
    }
}

#pragma mark - LVerifyTableViewCellDelegate 发送验证码

- (void)sendVerifyCode
{
    if (_timeDown > 0) {
        return;
    }

    if ([_account isEmail]) {
        [self sendEmailCodeWithEmail:_account];
    }
    else if ([_account isPhone]) {
        if (_areacode.length > 0) {
            [self sendPhoneCodeWithPhone:_account areacode:_areacode];
        }
        else {
            [self presentFailureTips:LOCALIZATION(@"请选择国家码")];
        }
    }
    else {
        [self presentFailureTips:LOCALIZATION(@"请输入正确格式的手机号或邮箱")];
    }
    
}

#pragma mark -
#pragma mark 配置计时器

/**
 配置计时器
 */
- (void)configTimer
{
    // 倒计时 60s
    _timeDown = 60;
    // 每秒更新一次倒计时
    _timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(timerFireMethod:) userInfo:nil repeats:YES];
}

- (void)timerFireMethod:(NSTimer *)timer
{
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:1 inSection:0];
    
    LVerifyTableViewCell *cell = [_tableView cellForRowAtIndexPath:indexPath];
    if (_timeDown > 0) {
        _timeDown -= 1;
        cell.sendVerify.userInteractionEnabled = NO;
        [cell.sendVerify setTitle:[NSString stringWithFormat:@"%ld", _timeDown] forState:UIControlStateNormal];
    }
    else {
        cell.sendVerify.userInteractionEnabled = YES;
        [cell.sendVerify setTitle:LOCALIZATION(@"获取验证码") forState:UIControlStateNormal];
        [timer invalidate];
    }
}

#pragma mark - RButtonTableViewCellDelegate
/**
 立刻注册
 */
- (void)registerNow
{
    [self checkVerifyCodeWithAccountType:_userType];
}

/**
 同意协议
 */
- (void)allowProtocolWithCell:(RButtonTableViewCell *)cell
{
    _agree = !_agree;
    cell.imgAllow.image = [UIImage imageNamed:[NSString stringWithFormat:@"%@", _agree ? cImageSelected : cImageUnSelected]];
}

#pragma mark -

/**
 发送邮箱验证码
 
 @param email 邮箱号
 */
- (void)sendEmailCodeWithEmail:(NSString *)email
{
    [self configTimer];
    _userType = ENUM_AccountTypeEmail;
    [[UserRequest sharedInstance] sendEmailCodeWithEmail:email completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
    }];
}

/**
 发送手机验证码
 
 @param phone 手机号
 */
- (void)sendPhoneCodeWithPhone:(NSString *)phone areacode:(NSString *)areacode
{
    [self configTimer];
    _userType = ENUM_AccountTypePhone;
    [[UserRequest sharedInstance] sendPhoneCodeWithPhone:phone areacode:areacode completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
    }];
}

/**
 验证验证码
 */
- (void)checkVerifyCodeWithAccountType:(NSInteger)accountType
{
    [[UserRequest sharedInstance] verityCodeWithType:[NSString stringWithFormat:@"%ld", accountType]
                                              verifi:_code
                                             account:_account
                                          completion:^(id object, ErrorModel *error) {
                                              if (error) {
                                                  [self presentFailureTips:error.message];
                                              }
                                              else {
                                                  if ([object isEqualToString:@"SUCCESS"]) {
                                                      [self RegisterWeChatWithType:_userType];
                                                  }
                                              }
                                          }];
}

- (void)RegisterWeChatWithType:(NSInteger)type
{
    [[UserRequest sharedInstance] registerWithWeChatInfo:_userDic phone:_account email:_account type:type completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            NSArray *array = [NSDictionary mj_objectArrayWithKeyValuesArray:object];
            if ([array.firstObject isKindOfClass:[NSDictionary class]]) {
                NSDictionary *dic = array.firstObject;
                UserModel *user = [UserModel mj_objectWithKeyValues:dic[@"user"]];
                [UserRequest sharedInstance].user = user;
                [UserRequest sharedInstance].token = dic[@"token"];
                [[UserRequest sharedInstance] saveCache];
                [self fk_postNotification:kNotificationUserLogin];
                [self registerSuccessWithType:ENUM_UserTypePerson];
            }
        }
    }];
}

/**
 注册成功
 */
- (void)registerSuccessWithType:(ENUM_UserType)type
{
    RegisterSuccessVC *rSuccessVC = [RegisterSuccessVC new];
    rSuccessVC.userType = type;
    [self.navigationController pushViewController:rSuccessVC animated:YES];
}

#pragma mark - 属性

- (NSArray *)arrViewConfiguration
{
    if (_arrViewConfiguration == nil) {
        _arrViewConfiguration = @[@{@"index": @"10000", @"identify": NSStringFromClass([LPhoneTableViewCell  class]), @"placeHolder": LOCALIZATION(@"邮箱/手机号"), @"icon": @"icon_register_account"},
                                  @{@"index": @"10003", @"identify": NSStringFromClass([LVerifyTableViewCell class]), @"placeHolder": LOCALIZATION(@"请输入验证码"), @"icon": @"icon_register_verification"},
                                  @{@"index": @"10004", @"identify": NSStringFromClass([RButtonTableViewCell class]), @"agree": @(_agree)},];
        
    }
    return _arrViewConfiguration;
}

@end
