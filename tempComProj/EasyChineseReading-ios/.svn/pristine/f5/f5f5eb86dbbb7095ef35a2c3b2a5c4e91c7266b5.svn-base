//
//  ZNetworkReuest.m
//  ZProject
//
//  Created by 赵春阳 on 16/9/21.
//  Copyright © 2016年 Z. All rights reserved.
//

#import "ZNetworkRequest.h"

NSString * const AppServerBaseURL       = @"http://192.168.10.107:8080/UniversityPressService";

NSString * const XHeaderToken          = @"User-token";
NSString * const XHeaderAuthorization  = @"Authorization";
NSString * const XHeaderContentType    = @"Content-Type";
NSString * const XHeaderAccept         = @"Accept";
NSString * const XHeaderAcceptLanguage = @"Accept-Language";

NSString * const XHeaderCountryCode    = @"X-Country-Code";
NSString * const XHeaderDeviceWidth    = @"X-Device-Width";
NSString * const XHeaderDeviceHeight   = @"X-Device-Height";
NSString * const XHeaderLocationlat    = @"X-Location-lat";
NSString * const XHeaderLocationlon    = @"X-Location-lng";

/**
 将 ZHttpRequestMethod 转换成 AFURLRequestSerialization 类中
 方法 - (NSMutableURLRequest *)requestWithMethod:(NSString *)method URLString:(NSString *)URLString parameters:(id)parameters error:(ErrorModel *__autoreleasing *)error
 参数 method 用到的 string 类型参数
 */
NSString *ENUM_ZHttpRequestMethodString (ENUM_ZHttpRequestMethod method)
{
    NSString *strMethod = nil;
    switch (method) {
//        case ENUM_ZHttpRequestMethodGet: {
//            strMethod = @"GET";
//            break;
//        }
        case ENUM_ZHttpRequestMethodPost: {
            strMethod = @"POST";
            break;
        }
//        case ENUM_ZHttpRequestMethodPut: {
//            strMethod = @"PUT";
//            break;
//        }
//        case ENUM_ZHttpRequestMethodPatch: {
//            strMethod = @"PATCH";
//            break;
//        }
//        case ENUM_ZHttpRequestMethodDelete: {
//            strMethod = @"DELETE";
//            break;
//        }
    }
    return strMethod;
}

@interface ZNetworkRequest ()

- (void)setupConstHeaders;
- (void)setupHeaders;

- (AFHTTPSessionManager *)httpSessionManager;

@end

@implementation ZNetworkRequest

@synthesize httpSessionManager = _httpSessionManager;

+ (instancetype)shareInstance
{
    static ZNetworkRequest *request = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        request = [[ZNetworkRequest alloc] init];
        [request setupHeaders];
        [request setupConstHeaders];
    });
    
    return request;
}

/**
 * 返回 一个线程队列
 */
-(NSOperationQueue *)operationQueue
{
    if (_operationQueue == nil) {
        _operationQueue = [[NSOperationQueue alloc] init];
        [_operationQueue setMaxConcurrentOperationCount:100];
    }
    return _operationQueue;
}

-(instancetype)init
{
    if ([super init]) {
        self.httpSessionManager.requestSerializer = [AFJSONRequestSerializer serializerWithWritingOptions:NSJSONWritingPrettyPrinted];
//        self.httpSessionManager.requestSerializer = [AFJSONRequestSerializer serializer];
    }
    return self;
}
-(AFHTTPSessionManager *)httpSessionManager
{
    if (_httpSessionManager == nil) {
        _httpSessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:AppServerBaseURL] sessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];
    }
    AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey];
    securityPolicy.allowInvalidCertificates = YES;
//    securityPolicy.validatesDomainName = NO;
    _httpSessionManager.securityPolicy = securityPolicy;
    
    return _httpSessionManager;
}

- (void)setupConstHeaders
{
    [self.httpSessionManager.requestSerializer setValue:@"application/json" forHTTPHeaderField:XHeaderAccept];
    [self.httpSessionManager.requestSerializer setValue:@"zh-CN,zh" forHTTPHeaderField:XHeaderAcceptLanguage];
    [self.httpSessionManager.requestSerializer setValue:@"application/json" forHTTPHeaderField:XHeaderContentType];
}

- (void)setupHeaders
{
    [self.httpSessionManager.requestSerializer setValue:@"0086" forHTTPHeaderField:XHeaderCountryCode];
    
    // TODO: token
//    if ( [UserInfoModel sharedInstance].online )
//    {
//        [self.httpSessionManager.requestSerializer setValue:[UCUserModel sharedInstance].token forHTTPHeaderField:XHeaderToken];
//    }
}

- (NSString *)convertUrlStringWithString:(NSString *)urlStr andDic:(NSDictionary *)dic
{
    NSAssert(urlStr && urlStr.length, @"Are you kiding ?! The URI endpoint for requset should not be empty");
    
    NSArray * partials = [urlStr componentsSeparatedByString:@"/"];
    
    NSArray * targets = [partials filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"SELF beginswith[c] ':'"]];
    
    __block NSMutableString * path = [urlStr mutableCopy];
    
    [targets enumerateObjectsUsingBlock:^(NSString * str, __unused NSUInteger idx, __unused BOOL *stop) {
        
        NSString * param = [dic valueForKey:[str stringByReplacingOccurrencesOfString:@":" withString:@""]];
        if (param) {
            [path replaceOccurrencesOfString:str
                                  withString:[param description]
                                     options:NSCaseInsensitiveSearch
                                       range:NSMakeRange(0, path.length)];
        }
    }];
    
    return path;
}

#pragma mark - 检查网络状态

+ (BOOL) netWorkReachabilityWithURLString:(NSString *) strUrl
{
    __block BOOL networkState = NO;
    
    NSURL *url = [NSURL URLWithString:strUrl];
    
    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:url];
    
    NSOperationQueue *operationQueue = manager.operationQueue;
    
    [manager.reachabilityManager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        switch (status) {
            case AFNetworkReachabilityStatusReachableViaWWAN:
            case AFNetworkReachabilityStatusReachableViaWiFi:
                [operationQueue setSuspended:NO]; // 回复队列
                networkState = YES;
                break;
            case AFNetworkReachabilityStatusNotReachable:
                networkState = NO;
            default:
                [operationQueue setSuspended:YES]; // 暂停队列
                break;
        }
        DDLog(@"networkReachabilityStatus: %@", AFStringFromNetworkReachabilityStatus(status));
    }];
    
    return networkState;
}

#pragma mark - 请求数据

+ (void)requestWithHttpMethod:(ENUM_ZHttpRequestMethod)method
                       strUrl:(NSString *)strUrl
                   parameters:(id)parameters
                completeBlock:(void (^)(id responseObject, ErrorModel *error))completeBlock

{
    // 拼参数
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithDictionary:parameters];
    NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithDictionary:dic[@"params"]];
    params[@"imsi"] = @"460030912121001";
    params[@"imei"] = @"460030912121001";
    dic[@"params"] = params;
    parameters = [dic mj_JSONString];
    
    // 拼链接
    strUrl = [AppServerBaseURL stringByAppendingString:[NSString stringWithFormat:@"/%@",strUrl]];
    
    // 拼网络请求
    AFHTTPSessionManager *httpSessionManager = [[AFHTTPSessionManager alloc] init];
    NSMutableURLRequest *request = [httpSessionManager.requestSerializer requestWithMethod:ENUM_ZHttpRequestMethodString(method) URLString:strUrl parameters:parameters error:nil];
    [request setHTTPBody:[parameters dataUsingEncoding:NSUTF8StringEncoding]];
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    
    // 发送请求
    NSLog(@"接口地址:%@,\n 接口方法:%@,\n 接口参数:%@", strUrl, ENUM_ZHttpRequestMethodString(method), parameters);
    
    UIViewController *currentTopViewController = [[[UIViewController alloc] init] topViewController];
    
    MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:currentTopViewController.view animated:YES];
    hud.mode = MBProgressHUDModeIndeterminate;
    [hud showAnimated:YES];
    
//    [currentTopViewController presentLoadingTips:nil];
    
    // 网络请求
    NSURLSessionDataTask *dataTask = [httpSessionManager dataTaskWithRequest:request completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {
        [hud hideAnimated:YES];
//        [currentTopViewController dismissTips];
        if (error) {    // 系统错误
            NSLog(@"requestError: %@", error);
            ErrorModel *customError = [ErrorModel new];
            customError.code = error.code;
            customError.message = error.userInfo[@"NSLocalizedDescription"];
            
            completeBlock(nil, customError);
        }
        else {
            if (([[responseObject objectForKey:@"returnJson"] isKindOfClass:[NSString class]] &&
                [[responseObject objectForKey:@"returnJson"] isEqualToString:@"ERROR"])||
                [[responseObject objectForKey:@"result"] integerValue] == 1) {   // 如果 return 是 ERROR 或者 result 是 1 则是错误
                ErrorModel *customError = [ErrorModel new];
                customError.code = [[responseObject objectForKey:@"result"] integerValue];
                customError.message = [responseObject objectForKey:@"returnJson"];
                NSLog(@"customError: %@", customError);
                completeBlock(nil, customError);
            }
            else {
                NSLog(@"requestObject: %@", [responseObject objectForKey:@"returnJson"]);
                completeBlock([responseObject objectForKey:@"returnJson"], nil);
            }
        }
    }];
    [dataTask resume];
}

#pragma mark - 下载文件
/**
 * 下载 文件 照片 语音 等
 * 传 地址
 */
+ (void)downLoadFileWithUrlString:(NSString *)urlString
                         progress:(void (^)(long long completedUnitCount, long long totalUnitCount))progress
                  completionBlock:(void (^)(id responseObject, ErrorModel *error))completeBlock
{
    //创建请求对象
    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:urlString]];
    
    //创建会话管理对象（在不使用Configuration来设置时用默认的manager足矣）
    AFHTTPSessionManager *sessionManager = [AFHTTPSessionManager manager];
    
    /**
     创建下载任务
    
     第一个参数:请求对象
     第二个参数:progress 进度回调
     第三个参数:destination 回调(目标位置)
     有返回值
     targetPath:临时文件路径
     response:响应头信息
     第四个参数:completionHandler 下载完成后的回调
     filePath:最终的文件路径
     */
    
    NSURLSessionDownloadTask *downloadTask = [sessionManager downloadTaskWithRequest:request progress:^(NSProgress *downloadProgress) {
        progress(downloadProgress.completedUnitCount * 1.0, downloadProgress.totalUnitCount * 100);
    } destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) {
        
        //接收到响应，准备开始接受数据
        NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
        
        //打印请求状态码
        NSLog(@"状态码:%li", httpResponse.statusCode);
        
        //targetPath临时问价保存路径
        
        //返回值为本次下载任务的保存路径
        NSString *filePath = [NSHomeDirectory() stringByAppendingPathComponent:response.suggestedFilename];
        //保存的文件路径
//        NSString *fullPath = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:response.suggestedFilename];
        
        //此block返回值为下载完之后文件存放的路径
        //这个返回的NSURL后面会传到filePath，因此这里自己设置的filePath可以随意取名
        return [NSURL fileURLWithPath:filePath];
        
    } completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) {
        
        //这个block返回的filePath实际上就是我们上面给他的确定的filePath,在这里他提供了这个可查下载文件路径的参数
        NSLog(@"下载完成路径:%@", filePath);
    }];
    
    //开始任务
    [downloadTask resume];
}

#pragma mark - 上传文件



/**
 * 上传 文件 照片 语音 等  最新接口
 * 传 上传类型、 地址、 数据
 */

+ (void)upLoadFileWithUrlString:(NSString *)urlString
                          files:(NSArray *)files
                       progress:(void (^)(long long completedUnitCount, long long totalUnitCount))progress
                completionBlock:(void (^)(id responseObject, ErrorModel *error))completeBlock
{
    //创建manager
    AFHTTPSessionManager *sessionManager = [AFHTTPSessionManager manager];
    
    /**
     创建上传任务
     
     第一个参数:请求路径
     第二个参数:字典(非文件参数)
     第三个参数:constructingBodyWithBlock 处理要上传的文件数据
     第四个参数:进度回调
     第五个参数:成功回调 responseObject响应体信息
     第六个参数:失败回调
     */
    [sessionManager POST:urlString parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        
        //本地文件路径
        
        //添加上传的数据
        
    } progress: ^(NSProgress * uploadProgress){
        NSLog(@"%@", uploadProgress);
    }success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@"上传成功:%@", responseObject);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"上传失败:%@",error);
    }];
}

/**
 上传data文件
 */

+ (void)upLoadFileWithUrlString:(NSString *)urlString
                           data:(NSData *)data
                       progress:(void (^)(long long completedUnitCount, long long totalUnitCount))progress
                completionBlock:(void (^)(id responseObject, ErrorModel *error))completeBlock
{
    
    //上传
    NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];
    NSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:urlString]];
//    [request addValue:@"image/jpeg" forHTTPHeaderField:@"Content-Type"];
//    [request addValue:@"text/html" forHTTPHeaderField:@"Accept"];
//    [request setHTTPMethod:@"POST"];
//    [request setCachePolicy:NSURLRequestReloadIgnoringCacheData];
//    [request setTimeoutInterval:20];
//    NSData * imagedata = UIImageJPEGRepresentation(self.imageview.image,1.0);
    NSURL *filePath = [NSURL fileURLWithPath:@"file://path/to/image.png"];
    NSURLSessionUploadTask *uploadTask = [manager uploadTaskWithRequest:request fromData:data progress:nil completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {
        if (error) {
            NSLog(@"Error: %@", error);
        } else {
            NSLog(@"Success: %@ %@", response, responseObject);
        }
    }];
    //重新开始上传
    [uploadTask resume];
}

/**
 * 上传 文件 照片 语音 等
 * 传 上传类型、 地址、 数据
 */

+ (void)upLoadFileWithUrlString:(NSString *)urlString
                           file:(NSURL *)file
                       progress:(void (^)(long long completedUnitCount, long long totalUnitCount))progress
                completionBlock:(void (^)(id responseObject, ErrorModel *error))completeBlock
{
    //上传
    NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];
    
    NSURL *URL = [NSURL URLWithString:@"http://example.com/upload"];
    NSURLRequest *request = [NSURLRequest requestWithURL:URL];
    
    NSURL *filePath = [NSURL fileURLWithPath:@"file://path/to/image.png"];
    NSURLSessionUploadTask *uploadTask = [manager uploadTaskWithRequest:request
                                                               fromFile:filePath
                                                               progress:^(NSProgress * uploadProgress){
                                                                   NSLog(@"%@", uploadProgress);
                                                               }
                                                      completionHandler:^(NSURLResponse *response, id responseObject, NSError *error) {
                                                          if (error) {
                                                              NSLog(@"Error: %@", error);
                                                          } else {
                                                              NSLog(@"Success: %@ %@", response, responseObject);
                                                          }
                                                      }];
    //重新开始上传
    [uploadTask resume];
}


@end
