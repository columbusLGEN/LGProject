//
//  ShareBookSelectedFriendVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 2017/10/20.
//  Copyright © 2017年 retech. All rights reserved.
//

#import "ShareBookSelectedFriendVC.h"

#import "UFriendListTableViewCell.h"
#import "ShareBookView.h"

@interface ShareBookSelectedFriendVC ()<
UITableViewDelegate, UITableViewDataSource,
UISearchBarDelegate,
ShareBookViewDelegate
>

@property (strong, nonatomic) UISearchBar *searchBar;

@property (strong, nonatomic) UITableView *tableView;

@property (strong, nonatomic) NSMutableArray *arrDataSource;
//@property (strong, nonatomic) NSMutableArray *arrFriendIds; // 好友 id 列表
@property (strong, nonatomic) NSMutableArray *arrSearchs;   // 搜索的好友

@property (strong, nonatomic) EmptyView *emptyView;

@property (assign, nonatomic) BOOL searchState;      // 搜索状态

@property (strong, nonatomic) UserModel *selectedFriend;

@end

@implementation ShareBookSelectedFriendVC


- (void)viewDidLoad {
    [super viewDidLoad];
    [self configSearchBar];
    [self configTableView];
    [self addEmptyView];
    [self getFriendsData];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - 获取数据

- (void)getFriendsData
{
    [[FriendRequest sharedInstance] getFriendListWithUserName:@"" completion:^(id object, ErrorModel *error) {
        
        if (error) {
            [self presentFailureTips:error.message];
        }
        else {
            _arrDataSource = [FriendModel mj_objectArrayWithKeyValuesArray:object];
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//                _arrFriendIds = [NSMutableArray array];
//                [_arrDataSource enumerateObjectsUsingBlock:^(FriendModel *obj, NSUInteger idx, BOOL * _Nonnull stop) {
//                    [_arrFriendIds addObject:@(obj.userId)];
//                }];
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    _emptyView.hidden = _arrDataSource.count > 0;
                    [[CacheDataSource sharedInstance] setCache:_arrDataSource withCacheKey:CacheKey_FriendsList];
//                    [[CacheDataSource sharedInstance] setCache:_arrFriendIds withCacheKey:CacheKey_FriendIdsList];
                    [_tableView reloadData];
                });
            });
        }
    }];
}

#pragma mark - 配置界面

- (void)configSearchBar
{
    _arrSearchs = [NSMutableArray array];
    _searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, Screen_Width, cHeaderHeight_44)];
    _searchBar.delegate = self;
    // 样式
    _searchBar.searchBarStyle = UISearchBarStyleProminent;
    _searchBar.placeholder = @"搜索好友";
    [self.view addSubview:_searchBar];
    // ** 自定义searchBar的样式 **
    UITextField* searchField = nil;
    // 注意searchBar的textField处于孙图层中
    for (UIView* subview  in [_searchBar.subviews firstObject].subviews) {
        NSLog(@"%@", subview.class);
        // 打印出两个结果:
        /*
         UISearchBarBackground
         UISearchBarTextField
         */
        
        if ([subview isKindOfClass:[UITextField class]]) {
            searchField = (UITextField*)subview;
            // leftView就是放大镜
            // searchField.leftView=nil;
            // 删除searchBar输入框的背景
            [searchField setBackground:nil];
            [searchField setBorderStyle:UITextBorderStyleNone];
            searchField.backgroundColor = [UIColor cm_lineColor_D9D7D7_1];
            // 设置圆角
            searchField.layer.cornerRadius = 15;
            searchField.layer.masksToBounds = YES;
            break;
        }
    }
}

- (void)configTableView
{
    self.title = @"选择朋友";
    
    _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, cHeaderHeight_44, Screen_Width, Screen_Height - cHeaderHeight_44 - cHeaderHeight_64) style:UITableViewStylePlain];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    
    _tableView.backgroundColor = [UIColor whiteColor];
    
    // tableView 自适应高度
    self.tableView.rowHeight = UITableViewAutomaticDimension;
    self.tableView.estimatedRowHeight = 100;
    
    [self.view addSubview:_tableView];
    
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([UFriendListTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([UFriendListTableViewCell class])];
}

- (void)addEmptyView
{
    _emptyView = [EmptyView loadFromNibWithFrame:self.view.bounds];
    [_emptyView updateEmptyViewWithType:ENUM_EmptyResultTypeFriend Image:nil desc:nil subDesc:nil];
    [self.view addSubview:_emptyView];
}

#pragma mark - UITableViewDataSource

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return _searchState ? self.arrSearchs.count : self.arrDataSource.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UFriendListTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:NSStringFromClass([UFriendListTableViewCell class])];
    cell.data = _searchState ? _arrSearchs[indexPath.row] : _arrDataSource[indexPath.row];
    return cell;
}

#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    _selectedFriend = _searchState ? _arrSearchs[indexPath.row] : _arrDataSource[indexPath.row];
    
    [ShareBookView sharedInstance].delegate = self;
    [ShareBookView sharedInstance].data = _book;
    [[ShareBookView sharedInstance] show];
}

- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section
{
    UIView *footerView = [UIView new];
    footerView.backgroundColor = [UIColor whiteColor];
    return footerView;
}

#pragma mark - UISearchBarDelegate

- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText
{
    _searchState = YES;

    [_arrSearchs removeAllObjects];
    if (searchText.length == 0) {
        _searchState = NO;
        [_tableView reloadData];
        return;
    }
    
    [_arrDataSource enumerateObjectsUsingBlock:^(UserModel *obj, NSUInteger idx, BOOL * _Nonnull stop) {
        if ([obj.name containsString:searchText]) {
            [_arrSearchs addObject:obj];
            [_tableView reloadData];
        }
    }];
}

- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar
{
    _searchState = YES;
    [_tableView reloadData];
}

#pragma mark -

- (void)shareBookWithBook:(BookModel *)book content:(NSString *)content type:(NSInteger)type
{
    [[ClassRequest sharedInstance] recommendBooksWithShareTitle:content
                                                        bookIds:[NSString stringWithFormat:@"%ld", book.bookId]
                                                     studentIds:[NSString stringWithFormat:@"%ld", _selectedFriend.userId]
                                                           type:0
                                                     completion:^(id object, ErrorModel *error) {
                                                         if (error) {
                                                             [self presentFailureTips:error.message];
                                                         }
                                                         else {
                                                             [self fk_postNotification:kNotificationShareBookToFriend];
                                                             [self presentSuccessTips:@"分享成功"];
                                                             [self.navigationController popViewControllerAnimated:YES];
                                                         }
                                                     }];
}

#pragma mark - 属性

- (NSMutableArray *)arrDataSource
{
    if (_arrDataSource == nil) {
        _arrDataSource = [[CacheDataSource sharedInstance] loadCacheWithCacheKey:CacheKey_FriendsList];
    }
    return _arrDataSource;
}

@end
