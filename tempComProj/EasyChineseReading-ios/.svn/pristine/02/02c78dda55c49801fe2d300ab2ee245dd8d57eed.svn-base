//
//  RegisterDetailVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 2017/9/8.
//  Copyright © 2017年 lee. All rights reserved.
//

#import "RegisterDetailVC.h"

#import "LTextFieldTableViewCell.h"
#import "LVerifyTableViewCell.h"
#import "RButtonTableViewCell.h"

#import "UserInfoAddressVC.h"
#import "RegisterSuccessVC.h"

@interface RegisterDetailVC ()<
UITableViewDelegate,
UITableViewDataSource,
UITextFieldDelegate,
LTextFieldTableViewCellDelegate,
LVerifyTableViewCellDelegate,
RButtonTableViewCellDelegate,
ZPickViewDelegate
>

@property (strong, nonatomic) UITableView *tableView;

@property (strong, nonatomic) NSArray *arrViewConfiguration;   // 界面配置

@property (assign, nonatomic) CGFloat keyBoardHeight;          // 键盘高度
@property (nonatomic, assign) CGFloat tableOffset;             // table 偏移量

@property (nonatomic, strong) NSIndexPath *selectedIndexPath;  // 选中的cell

@property (nonatomic, strong) NSString *name;                  // 昵称
@property (nonatomic, strong) NSString *school;                // 学校
@property (nonatomic, strong) NSString *phone;                 // 手机号
@property (nonatomic, strong) NSString *email;                 // email
@property (nonatomic, strong) NSString *password;              // 密码
@property (nonatomic, strong) NSString *rePassword;            // 重复密码
@property (nonatomic, strong) NSString *code;                  // 验证码
@property (nonatomic, strong) NSString *user;                  // 账号
@property (nonatomic, strong) NSString *studentNum;            // 学习汉语学生数
@property (nonatomic, strong) NSString *strSchoolType;         // 学校类型(文本)
@property (nonatomic, assign) NSInteger country;               // 国家码

@property (nonatomic, strong) NSArray *arrSchool;              // 学校类型数组

@property (nonatomic, assign) BOOL agree;                      // 同意注册条款

@property (nonatomic, assign) ENUM_SchoolType schoolType;      // 学校类型
@property (nonatomic, strong) ZPickView *pickSchool;           // 选择学校

@property (strong, nonatomic) NSTimer *timer;                  // 计时器
@property (assign, nonatomic) NSInteger timeDown;              // 倒计时时间

@end

static CGFloat const kHeaderHeight = 10.f;  // tableViewHeader 高度（空白高度）

@implementation RegisterDetailVC

- (void)viewDidLoad {
    [super viewDidLoad];
    
    _agree = YES;
//    _country = 
    [self configRegisterView];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self addNotification];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

#pragma mark -
#pragma mark 配置登录界面

- (void)updateSystemLanguage
{
    
}

- (void)configRegisterView
{
    self.view.backgroundColor = [UIColor whiteColor];
    [self configTableView];
}

- (void)addNotification
{
    // 监听 键盘出现或改变
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
    // 监听 键盘退出
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
}

- (void)configTableView
{
    _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, kHeaderHeight, Screen_Width, self.view.height - cHeaderHeight_44 - cHeaderHeight_64 - kHeaderHeight) style:UITableViewStyleGrouped];
    _tableView.backgroundColor = [UIColor whiteColor];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    _tableView.rowHeight = UITableViewAutomaticDimension;
    _tableView.estimatedRowHeight = 100;
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    
    [self.view addSubview:_tableView];
    
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LTextFieldTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LTextFieldTableViewCell class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LVerifyTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LVerifyTableViewCell class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([RButtonTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([RButtonTableViewCell class])];
}

#pragma mark -
#pragma mark UITableViewDataSource

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.arrViewConfiguration.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:_arrViewConfiguration[indexPath.row][@"identify"]];
    cell.data = _arrViewConfiguration[indexPath.row];
    if ([cell isKindOfClass:[LTextFieldTableViewCell class]]) {
        LTextFieldTableViewCell *txtfCell = (LTextFieldTableViewCell *)cell;
        txtfCell.delegate = self;
    }
    else if ([cell isKindOfClass:[RButtonTableViewCell class]]) {
        RButtonTableViewCell *btnCell = (RButtonTableViewCell *)cell;
        btnCell.delegate = self;
    }
    else if ([cell isKindOfClass:[LVerifyTableViewCell class]]) {
        LVerifyTableViewCell *verCell = (LVerifyTableViewCell *)cell;
        verCell.delegate = self;
    }
    
    [self configTextWithCell:cell];
    return cell;
}

#pragma mark -
#pragma mark UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    // 如果分配的数据有 showSelected ，那么点击这个cell 跳转选择国家
    if (_arrViewConfiguration[indexPath.row][@"showSelected"]) {
        if ([_arrViewConfiguration[indexPath.row][@"index"] isEqualToString:@"20002"]) {
            [self selectedSchoolType];
        }
        else if ([_arrViewConfiguration[indexPath.row][@"index"] isEqualToString:@"20004"]) {
            [self selectedCountry];
        }
    }
}

#pragma mark -
#pragma mark UIScrollViewDelegate

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    [self.view endEditing:YES];
}

#pragma mark -
#pragma mark LTextFieldTableViewCellDelegate

- (void)selectedCountry
{
    [self.view endEditing:YES];

    UserInfoAddressVC *addressVC = [[UserInfoAddressVC alloc] init];
    addressVC.language = [UserRequest sharedInstance].language;
    addressVC.selectedCountryBlock = ^(CountryModel * country){
        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:3 inSection:0];
        LTextFieldTableViewCell *cell = [_tableView cellForRowAtIndexPath:indexPath];
        cell.txtfContent.text = country.zh_name;
        _country = country.id;
    };
    [self.navigationController pushViewController:addressVC animated:YES];
}

- (void)selectedSchoolType
{
    [self.view endEditing:YES];

    [self configPickViewSchool];
}

/**
 选择学校
 */
- (void)configPickViewSchool
{
    if (_pickSchool == nil) {
        _arrSchool = @[LOCALIZATION(@"小学"), LOCALIZATION(@"中学"), LOCALIZATION(@"大学"), LOCALIZATION(@"教育机构")];
        _pickSchool = [[ZPickView alloc] initWithFrame:CGRectMake(0, 0, Screen_Width, Screen_Height) dataSource:_arrSchool selected:0];
        _pickSchool.delegates = self;
        
        [self.view addSubview:_pickSchool];
    }
    [_pickSchool show];
}

#pragma mark - LVerifyTableViewCellDelegate 发送验证码

- (void)sendVerifyCode
{
    if (_timeDown > 0) {
        return;
    }
    if (_userType == ENUM_UserTypeOrganization) {
//        if ([_phone isPhone]) {
//            [self sendPhoneCodeWithPhone:_phone];
//        }
        if ([_email isEmail]) {
            [self sendEmailCodeWithEmail:_email];
        }
        else {
            [self presentFailureTips:LOCALIZATION(@"请输入正确格式的手机号")];
        }
    }
    else {
        if ([_user isEmail]) {
            [self sendEmailCodeWithEmail:_user];
        }
        else if ([_user isPhone]) {
            [self sendPhoneCodeWithPhone:_user];
        }
        else {
            [self presentFailureTips:LOCALIZATION(@"请输入正确格式的手机号或邮箱")];
        }
    }
}

#pragma mark -
#pragma mark 配置计时器

/**
 配置计时器
 */
- (void)configTimer
{
    // 倒计时 60s
    _timeDown = 60;
    // 每秒更新一次倒计时
    _timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(timerFireMethod:) userInfo:nil repeats:YES];
}

- (void)timerFireMethod:(NSTimer *)timer
{
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:_userType == ENUM_UserTypeOrganization ? 7 : 3 inSection:0];

    LVerifyTableViewCell *cell = [_tableView cellForRowAtIndexPath:indexPath];
    if (_timeDown > 0) {
        _timeDown -= 1;
        cell.sendVerify.userInteractionEnabled = NO;
        [cell.sendVerify setTitle:[NSString stringWithFormat:@"%ld", _timeDown] forState:UIControlStateNormal];
    }
    else {
        cell.sendVerify.userInteractionEnabled = YES;
        [cell.sendVerify setTitle:LOCALIZATION(@"获取验证码") forState:UIControlStateNormal];
        [timer invalidate];
    }
}


#pragma mark - ZPickViewDelegate

- (void)ZPickerView:(ZPickView *)picker makeSureIndex:(NSInteger)index
{
    _schoolType = index;
    
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:1 inSection:0];
    LTextFieldTableViewCell *cell = [_tableView cellForRowAtIndexPath:indexPath];
    cell.txtfContent.text = _arrSchool[index];
    
    [picker hidden];
}

- (void)ZPickerViewCancel:(ZPickView *)picker
{
    [_pickSchool hidden];
}

#pragma mark - RButtonTableViewCellDelegate

/**
 立刻注册
 */
- (void)registerNow
{
    [self checkRegisterInfomation];
}

/**
 同意协议
 */
- (void)allowProtocolWithCell:(RButtonTableViewCell *)cell
{
    _agree = !_agree;
    cell.imgAllow.image = [UIImage imageNamed:[NSString stringWithFormat:@"%@", _agree ? @"selected" : @"unSelected"]];
}

#pragma mark - 注册流程

// ------------------------------------------------------------
// 	普通用户							机构用户
// |						      |
// |--检查注册信息				      |--检查注册信息
// |--验证账号唯一性（手机或邮箱）	  |--验证账号唯一性（手机与邮箱，验证两次）
// |  (返回0,1 0-可以使用的账号)	  |  (返回0,1 0-可以使用的账号)
// |--发送验证码                    |--发送验证码
// |--验证验证码                    |--验证验证码
// |--提交注册信息				      |--提交注册信息
// |--登录（获取用户信息）			  |--登录（获取用户信息）
// |--注册成功					  |--注册成功
// -------------------------------------------------------------

/**
 检查注册信息
 */
- (void)checkRegisterInfomation
{
    // 判断账号类型（手机 邮箱）
    NSString *accountType = @"";
    if (_user.length > 0) {
        if ([_user isEmail]) {
            accountType = [NSString stringWithFormat:@"%lu", (unsigned long)ENUM_AccountTypeEmail];
            _email = _user;
            _phone = @"";
        }
        else if ([_user isPhone]) {
            accountType = [NSString stringWithFormat:@"%lu", (unsigned long)ENUM_AccountTypePhone];
            _phone = _user;
            _email = @"";
        }
        else {
            [self presentFailureTips:LOCALIZATION(@"账号类型错误，账号为手机/邮箱号")];
            return;
        }
    }
    //机构用户
    if (_userType == ENUM_UserTypeOrganization) {
        // 手机号检查
        if ([NSString isEmpty:_phone]) {
            [self presentFailureTips:LOCALIZATION(@"手机号不能为空")];
            return;
        }
        if (![_phone isPhone]) {
            [self presentFailureTips:LOCALIZATION(@"手机号格式不对，请重新输入")];
            return;
        }
        // 邮箱检查
        if ([NSString isEmpty:_email]) {
            [self presentFailureTips:LOCALIZATION(@"邮箱号不能为空")];
            return;
        }
        if (![_email isEmail]) {
            [self presentFailureTips:LOCALIZATION(@"邮箱号格式不对，请重新输入")];
            return;
        }
        // 学校检查
        if ([NSString isEmpty:_school]) {
            [self presentFailureTips:LOCALIZATION(@"学校不能为空")];
            return;
        }
        // 申请人姓名检查
        if ([NSString isEmpty:_name]) {
            [self presentFailureTips:LOCALIZATION(@"申请人姓名不能为空")];
            return;
        }
    }
    else {
        if ([NSString isEmpty:_user]) {
            [self presentFailureTips:LOCALIZATION(@"账号不能为空")];
            return;
        }
        // 密码检查
        if ([NSString isEmpty:_password]) {
            [self presentFailureTips:LOCALIZATION(@"输入密码")];
            return;
        }
        if ([NSString isEmpty:_rePassword]) {
            [self presentFailureTips:LOCALIZATION(@"确认密码不能为空")];
            return;
        }
        if (_password.length > cMaxPasswordLength || _password.length < cMinPasswordLength || ![_password isPassword]) {
            [self presentFailureTips:LOCALIZATION(@"密码为8-16个字符，可由英文、数字组成")];
            return;
        }
        if (![_password isEqualToString:_rePassword]) {
            [self presentFailureTips:LOCALIZATION(@"两次输入的密码不一样，请确认后重新输入")];
            return;
        }
    }
    
    if ([_code empty]) {
        [self presentFailureTips:LOCALIZATION(@"请输入验证码")];
        return;
    }
    
    // 注册条款检查
    if (!_agree) {
        [self presentFailureTips:LOCALIZATION(@"您并未同意注册条款，将不能注册使用此APP")];
        return;
    }

    [self verifyAccountSingleWithAccountType:accountType];
}

/**
 验证账号的唯一性

 @param accountType 账号类型（手机 邮箱）
 */
- (void)verifyAccountSingleWithAccountType:(NSString *)accountType
{
    if (_userType == ENUM_UserTypePerson) {
        [self personVerifySingleWithAccountType:accountType];
    }
    else {
        [self organizationVerifySingleWithPhone];
    }
}

/**
 普通用户验证账号唯一性

 @param accountType 账号类型（手机 邮箱）
 */
- (void)personVerifySingleWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] verifyAccountSingleWithUserName:_user
                                                         userType:accountType
                                                       completion:^(id object, ErrorModel *error) {
                                                           if (error) {
                                                               [self presentFailureTips:error.message];
                                                           }
                                                           else {
                                                               if ([object isEqualToString:@"0"]) { // 数据中没有该账号 可以使用
                                                                   [self checkVerifyCodeWithAccountType:accountType];
                                                               }
                                                               else {
                                                                   [self presentFailureTips:LOCALIZATION(@"手机号已存在，请直接返回上一界面登录, 或更换账号后重新注册")];
                                                               }
                                                           }
                                                       }];
}

/**
 机构用户验证手机的唯一性
 */
- (void)organizationVerifySingleWithPhone
{
    [[UserRequest sharedInstance] verifyAccountSingleWithUserName:_phone
                                                         userType:[NSString stringWithFormat:@"%ld", ENUM_AccountTypePhone]
                                                       completion:^(id object, ErrorModel *error) {
                                                           if (error) {
                                                               [self presentFailureTips:error.message];
                                                           }
                                                           else {
                                                               if ([object isEqualToString:@"0"]) { // 数据中没有该账号 可以使用
                                                                   [self organizationVerifySingleWithEmail];
                                                               }
                                                               else {
                                                                   [self presentFailureTips:LOCALIZATION(@"手机号已存在，请直接返回上一界面登录, 或更换账号后重新注册")];
                                                               }
                                                           }
                                                           
                                                       }];
}

/**
 机构用户验证邮箱的唯一性
 */
- (void)organizationVerifySingleWithEmail
{
    [[UserRequest sharedInstance] verifyAccountSingleWithUserName:_email
                                                         userType:[NSString stringWithFormat:@"%ld", ENUM_AccountTypeEmail]
                                                       completion:^(id object, ErrorModel *error) {
                                                           if (error) {
                                                               [self presentFailureTips:error.message];
                                                           }
                                                           else {
                                                               if ([object isEqualToString:@"0"]) { // 数据中没有该账号 可以使用
                                                                   [self checkVerifyCodeWithAccountType:[NSString stringWithFormat:@"%ld", ENUM_AccountTypeEmail]];
                                                               }
                                                               else {
                                                                   [self presentFailureTips:LOCALIZATION(@"邮箱已存在，请直接返回上一界面登录, 或更换账号后重新注册")];
                                                               }
                                                           }
                                                       }];
}

/**
 发送邮箱验证码
 
 @param email 邮箱号
 */
- (void)sendEmailCodeWithEmail:(NSString *)email
{
    [self configTimer];

    [[UserRequest sharedInstance] sendEmailCodeWithEmail:email completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
    }];
}

/**
 发送手机验证码
 
 @param phone 手机号
 */
- (void)sendPhoneCodeWithPhone:(NSString *)phone
{
    [self configTimer];

    [[UserRequest sharedInstance] sendPhoneCodeWithPhone:phone completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
    }];
}

/**
 验证验证码
 */
- (void)checkVerifyCodeWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] verityCodeWithType:accountType
                                              verifi:_code
                                             account:_userType == ENUM_UserTypeOrganization ? _email : _user
                                          completion:^(id object, ErrorModel *error) {
                                              if (error) {
                                                  [self presentFailureTips:error.message];
                                              }
                                              else {
                                                  if ([object isEqualToString:@"SUCCESS"]) {
                                                      [self registerRequestWithAccountType:accountType];
                                                  }
                                              }
                                          }];
}

/**
 提交注册信息

 @param accountType 账号类型（手机 邮箱）
 */
- (void)registerRequestWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] registerUserWithType:accountType
                                              userType:[NSString stringWithFormat:@"%ld", (long)_userType]
                                              password:_password
                                                school:_school
                                            schoolType:[NSString stringWithFormat:@"%ld", _schoolType]
                                            learnChNum:_studentNum
                                               country:[NSString stringWithFormat:@"%ld", _country]
                                                  name:_name
                                                 email:_email
                                                 phone:_phone
                                            completion:^(id object, ErrorModel *error) {
                                                if (error) {
                                                    [self presentFailureTips:error.message];
                                                }
                                                else {
                                                    if ([object isEqualToString:@"SUCCESS"]) {
                                                        if (_userType == ENUM_UserTypePerson) {
                                                            [self loginWithAccountType:accountType];
                                                        }
                                                        else {
                                                            [self registerSuccessWithType:ENUM_UserTypeOrganization];
                                                        }
                                                    }
                                                    else {
                                                        [self presentFailureTips:LOCALIZATION(@"注册失败，请重试")];
                                                    }
                                                }
                                            }];
}

/**
 登录
 
 @param accountType 账号类型（手机 邮箱）
 */
- (void)loginWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] loginWithType:[NSString stringWithFormat:@"%ld", (long)ENUM_LoginTypePassword]
                                       userType:accountType
                                           user:_user
                                       password:_password
                                         userId:@""
                                          token:@""
                                     completion:^(id object, ErrorModel *error) {
                                         if (error) {
                                             [self presentFailureTips:error.message];
                                         }
                                         else {
                                             if ([object isKindOfClass:[NSDictionary class]]) {
                                                 UserModel *user = [UserModel mj_objectWithKeyValues:object[@"user"]];
                                                 [UserRequest sharedInstance].user = user;
                                                 [UserRequest sharedInstance].token = object[@"token"];
                                                 [[UserRequest sharedInstance] saveCache];
                                                 [self fk_postNotification:kNotificationUserLogin];
                                                 [self registerSuccessWithType:ENUM_UserTypePerson];
                                             }
                                         }
                                     }];
}

/**
 注册成功
 */
- (void)registerSuccessWithType:(ENUM_UserType)type
{
    RegisterSuccessVC *rSuccessVC = [RegisterSuccessVC new];
    rSuccessVC.userType = type;
    [self.navigationController pushViewController:rSuccessVC animated:YES];
}

#pragma mark - 监听键盘

// 键盘出现或改变
- (void)keyboardWillShow:(NSNotification *)notification
{
    //获取键盘的高度
    NSDictionary *userInfo = [notification userInfo];
    NSValue *aValue = [userInfo objectForKey:UIKeyboardFrameEndUserInfoKey];
    CGRect keyboardRect = [aValue CGRectValue];
    _keyBoardHeight = keyboardRect.size.height;
    
    UITableViewCell *cell = [_tableView cellForRowAtIndexPath:_selectedIndexPath];
    if (cell.y + cell.height > self.view.height - _keyBoardHeight) {
        _tableOffset = (cell.y + cell.height) - self.view.height + _keyBoardHeight;
        _tableView.frame = CGRectMake(0, -_tableOffset, Screen_Width, self.view.height);
    }
}

// 键盘退出
- (void)keyboardWillHide:(NSNotification *)notification
{
    _tableView.frame = CGRectMake(0, 0, Screen_Width, self.view.height);
}

#pragma mark - 获取 注册表 textfield 的值

- (void)configTextWithCell:(UITableViewCell *)cell
{
    LTextFieldTableViewCell *tCell = (LTextFieldTableViewCell *)cell;
    LVerifyTableViewCell    *vCell = (LVerifyTableViewCell *)cell;
    if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LTextFieldTableViewCell class])]) {
        tCell.txtfContent.delegate = self;
        [tCell.txtfContent addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
    }
    else if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LVerifyTableViewCell class])]) {
        vCell.txtfContent.delegate = self;
        [vCell.txtfContent addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
    }
}

- (void)textFieldWithText:(UITextField *)textField
{
    switch (textField.tag) {
        case 10000: _user = textField.text;          break;
        case 10001: _password = textField.text;      break;
        case 10002: _rePassword = textField.text;    break;
        case 10003: _code = textField.text;          break;
        case 20001: _school = textField.text;        break;
        case 20002: _strSchoolType = textField.text; break;
        case 20003: _studentNum = textField.text;    break;
        case 20005: _name = textField.text;          break;
        case 20006: _phone = textField.text;         break;
        case 20007: _email = textField.text;         break;
        case 20008: _code = textField.text;          break;
        default:
            break;
    }
}

#pragma mark - UITextFieldDelegate

- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string
{
    NSLog(@"zz");
    return YES;
}

#pragma mark - 属性

- (NSArray *)arrViewConfiguration
{
    if (_arrViewConfiguration == nil) {
        if (_userType == ENUM_UserTypePerson || _userType == ENUM_UserTypeStudent) {
            _arrViewConfiguration = @[@{@"index": @"10000", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"邮箱/手机号"), @"icon": @"icon_register_account"},
                                      @{@"index": @"10001", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"输入密码"), @"icon": @"icon_login_password", @"password": @"1"},
                                      @{@"index": @"10002", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"确认密码"), @"icon": @"icon_login_password", @"password": @"1"},
                                      @{@"index": @"10003", @"identify": NSStringFromClass([LVerifyTableViewCell class]),    @"placeHolder": LOCALIZATION(@"请输入验证码"), @"icon": @"login18"},
                                      @{@"index": @"10004", @"identify": NSStringFromClass([RButtonTableViewCell class]),    @"agree": @(_agree)},];
        }
        else {
            _arrViewConfiguration = @[@{@"index": @"20001", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"学校/机构名称"), @"icon": @"login16"},
                                      @{@"index": @"20002", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"学校类型"), @"icon": @"login4", @"showSelected": @(1), @"content": @"小学"},
                                      @{@"index": @"20003", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"学习汉语学生数"), @"icon": @"login4"},
                                      @{@"index": @"20004", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"所在国家或地区"), @"icon": @"login3", @"showSelected": @(1), @"content": @"中国"},
                                      @{@"index": @"20005", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"申请人姓名"), @"icon": @"login4"},
                                      @{@"index": @"20006", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"联系电话"), @"icon": @"icon_register_account"},
                                      @{@"index": @"20007", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": LOCALIZATION(@"联系邮箱"), @"icon": @"login17"},
                                      @{@"index": @"20008", @"identify": NSStringFromClass([LVerifyTableViewCell class]),    @"placeHolder": LOCALIZATION(@"请输入验证码"), @"icon": @"login18"},
                                      @{@"index": @"20009", @"identify": NSStringFromClass([RButtonTableViewCell class]),    @"agree": @(_agree)},];
        }
    }
    return _arrViewConfiguration;
}

@end
