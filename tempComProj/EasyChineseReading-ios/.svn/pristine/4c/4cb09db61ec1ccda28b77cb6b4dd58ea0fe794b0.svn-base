//
//  ZNetworkReuest.m
//  ZProject
//
//  Created by 赵春阳 on 16/9/21.
//  Copyright © 2016年 Z. All rights reserved.
//

#import "ZNetworkRequest.h"

NSString * const AppServerBaseURL       = @"http://192.168.10.107:8080/UniversityPressService";

NSString * const XHeaderToken          = @"User-token";
NSString * const XHeaderAuthorization  = @"Authorization";
NSString * const XHeaderContentType    = @"Content-Type";
NSString * const XHeaderAccept         = @"Accept";
NSString * const XHeaderAcceptLanguage = @"Accept-Language";

NSString * const XHeaderCountryCode    = @"X-Country-Code";
NSString * const XHeaderDeviceWidth    = @"X-Device-Width";
NSString * const XHeaderDeviceHeight   = @"X-Device-Height";
NSString * const XHeaderLocationlat    = @"X-Location-lat";
NSString * const XHeaderLocationlon    = @"X-Location-lng";

/**
 将 ZHttpRequestMethod 转换成 AFURLRequestSerialization 类中
 方法 - (NSMutableURLRequest *)requestWithMethod:(NSString *)method URLString:(NSString *)URLString parameters:(id)parameters error:(NSError *__autoreleasing *)error
 参数 method 用到的 string 类型参数
 */
NSString *ENUM_ZHttpRequestMethodString (ENUM_ZHttpRequestMethod method)
{
    NSString *strMethod = nil;
    switch (method) {
        case ENUM_ZHttpRequestMethodGet: {
            strMethod = @"GET";
            break;
        }
        case ENUM_ZHttpRequestMethodPost: {
            strMethod = @"POST";
            break;
        }
        case ENUM_ZHttpRequestMethodPut: {
            strMethod = @"PUT";
            break;
        }
//        case ENUM_ZHttpRequestMethodPatch: {
//            strMethod = @"PATCH";
//            break;
//        }
        case ENUM_ZHttpRequestMethodDelete: {
            strMethod = @"DELETE";
            break;
        }
    }
    return strMethod;
}

@interface ZNetworkRequest ()

- (void)setupConstHeaders;
- (void)setupHeaders;

- (AFHTTPSessionManager *)httpSessionManager;

@end

@implementation ZNetworkRequest
@synthesize httpSessionManager = _httpSessionManager;

+ (instancetype)shareInstance
{
    static ZNetworkRequest *request = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        request = [[ZNetworkRequest alloc] init];
        [request setupHeaders];
        [request setupConstHeaders];
    });
    
    return request;
}

/**
 * 返回 一个线程队列
 */
-(NSOperationQueue *)operationQueue
{
    if (_operationQueue == nil) {
        _operationQueue = [[NSOperationQueue alloc] init];
        [_operationQueue setMaxConcurrentOperationCount:100];
    }
    return _operationQueue;
}

-(instancetype)init
{
    if ([super init]) {
        self.httpSessionManager.requestSerializer = [AFJSONRequestSerializer serializerWithWritingOptions:NSJSONWritingPrettyPrinted];
//        self.httpSessionManager.requestSerializer = [AFJSONRequestSerializer serializer];
    }
    return self;
}
-(AFHTTPSessionManager *)httpSessionManager
{
    if (_httpSessionManager == nil) {
        _httpSessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:AppServerBaseURL] sessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];
    }
    AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey];
    securityPolicy.allowInvalidCertificates = YES;
//    securityPolicy.validatesDomainName = NO;
    _httpSessionManager.securityPolicy = securityPolicy;
    
    return _httpSessionManager;
}

- (void)setupConstHeaders
{
    [self.httpSessionManager.requestSerializer setValue:@"application/json" forHTTPHeaderField:XHeaderAccept];
    [self.httpSessionManager.requestSerializer setValue:@"zh-CN,zh" forHTTPHeaderField:XHeaderAcceptLanguage];
    [self.httpSessionManager.requestSerializer setValue:@"application/json" forHTTPHeaderField:XHeaderContentType];
}

- (void)setupHeaders
{
    [self.httpSessionManager.requestSerializer setValue:@"0086" forHTTPHeaderField:XHeaderCountryCode];
    
    // TODO:
//    if ( [UserInfoModel sharedInstance].online )
//    {
//        [self.httpSessionManager.requestSerializer setValue:[UCUserModel sharedInstance].token forHTTPHeaderField:XHeaderToken];
//    }
}

- (NSString *)convertUrlStringWithString:(NSString *)urlStr andDic:(NSDictionary *)dic
{
    NSAssert(urlStr && urlStr.length, @"Are you kiding ?! The URI endpoint for requset should not be empty");
    
    NSArray * partials = [urlStr componentsSeparatedByString:@"/"];
    
    NSArray * targets = [partials filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"SELF beginswith[c] ':'"]];
    
    __block NSMutableString * path = [urlStr mutableCopy];
    
    [targets enumerateObjectsUsingBlock:^(NSString * str, __unused NSUInteger idx, __unused BOOL *stop) {
        
        NSString * param = [dic valueForKey:[str stringByReplacingOccurrencesOfString:@":" withString:@""]];
        if (param) {
            [path replaceOccurrencesOfString:str
                                  withString:[param description]
                                     options:NSCaseInsensitiveSearch
                                       range:NSMakeRange(0, path.length)];
        }
    }];
    
    return path;
}

#pragma mark - 检查网络状态

+ (BOOL) netWorkReachabilityWithURLString:(NSString *) strUrl
{
    __block BOOL networkState = NO;
    
    NSURL *url = [NSURL URLWithString:strUrl];
    
    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:url];
    
    NSOperationQueue *operationQueue = manager.operationQueue;
    
    [manager.reachabilityManager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        switch (status) {
            case AFNetworkReachabilityStatusReachableViaWWAN:
            case AFNetworkReachabilityStatusReachableViaWiFi:
                [operationQueue setSuspended:NO]; // 回复队列
                networkState = YES;
                break;
            case AFNetworkReachabilityStatusNotReachable:
                networkState = NO;
            default:
                [operationQueue setSuspended:YES]; // 暂停队列
                break;
        }
        DDLog(@"networkReachabilityStatus: %@", AFStringFromNetworkReachabilityStatus(status));
    }];
    
    return networkState;
}

#pragma mark - 请求数据

+ (void)requestWithHttpMethod:(ENUM_ZHttpRequestMethod)method
                       strUrl:(NSString *)strUrl
                   parameters:(id)parameters
                completeBlock:(void (^)(id responseObject, ErrorModel *error))completeBlock

{
    // 拼参数
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithDictionary:parameters];
    NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithDictionary:dic[@"params"]];
    params[@"imsi"] = @"460030912121001";
    params[@"imei"] = @"460030912121001";
    dic[@"params"] = params;
    parameters = [dic mj_JSONString];
    // 拼链接
    strUrl = [AppServerBaseURL stringByAppendingString:[NSString stringWithFormat:@"/%@",strUrl]];
    
    // 拼网络请求
    AFHTTPSessionManager *httpSessionManager = [[AFHTTPSessionManager alloc] init];
    // 如果没有baseUrl 直接使用绝对地址
//    NSMutableURLRequest *request = [httpSessionManager requestWithMethod:ENUM_ZHttpRequestMethodString(method) URLString:[[NSURL URLWithString:[self convertUrlStringWithString:strUrl andDic:parameters] relativeToURL:httpSessionManager.baseURL] absoluteString] parameters:parameters error:nil];
    NSMutableURLRequest *request = [httpSessionManager.requestSerializer requestWithMethod:ENUM_ZHttpRequestMethodString(method) URLString:strUrl parameters:parameters error:nil];
    [request setHTTPBody:[parameters dataUsingEncoding:NSUTF8StringEncoding]];
    
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    // 发送请求
    NSLog(@"接口地址:%@,\n 接口方法:%@,\n 接口参数:%@", strUrl, ENUM_ZHttpRequestMethodString(method), parameters);
    NSURLSessionDataTask *dataTask = [httpSessionManager dataTaskWithRequest:request completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {
        if (error) {
            NSLog(@"requestError: %@", error);
            completeBlock(responseObject, (ErrorModel *)error);
        }
        else {
            completeBlock([[responseObject objectForKey:@"returnJson"] mj_JSONObject], nil);
        }
    }];
    [dataTask resume];
}


@end
