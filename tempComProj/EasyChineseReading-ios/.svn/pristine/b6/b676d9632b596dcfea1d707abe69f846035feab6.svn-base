//
//  ECRBookRackController.m
//  EasyChineseReading-ios
//
//  Created by lee on 2017/9/5.
//  Copyright ¬© 2017Âπ¥ lee. All rights reserved.
//

#define ECRBookrackcell @"ECRBookrackCollectionViewCell"

#import "ECRBookRackController.h"
#import "ECRBookrackView.h"
#import "ECRBookrackModel.h"
#import "ECRBookReaderController.h"
#import "ECRBookrackCollectionViewCell.h"
#import "ECRBookrackFlowLayout.h"
#import "ECRBookrackModel.h"
#import "ECRFloderView.h"
#import "ECRBookFloderLayout.h"

@interface ECRBookRackController ()<
ECRBookrackViewDelegate,
UICollectionViewDelegate,
UICollectionViewDataSource,
ECRBookrackFlowLayoutSwitchStateDelegate,
LXReorderableCollectionViewDataSource,
LXReorderableCollectionViewDelegateFlowLayout,
ECRFloderViewDelegate
>

@property (strong,nonatomic) ECRBookrackView *mainView;
@property (copy,nonatomic) void(^editDoneBlock)();
@property (strong,nonatomic) NSMutableArray<ECRBookrackModel *> *bookrackModels;
//@property (strong,nonatomic) ECRBookrackFlowLayout *brLayout;
@property (strong,nonatomic) ECRFloderView *floderView;

@end

@implementation ECRBookRackController

#pragma mark - ECRFloderViewDelegate
- (void)floderViewClose:(ECRFloderView *)floderView{
    if (self.floderView != nil) {
        [self.floderView removeFromSuperview];
        self.floderView = nil;
    }
}

#pragma mark - ECRBookrackViewDelegate

#pragma mark - ECRBookrackFlowLayoutSwitchStateDelegate
- (void)brflayout:(ECRBookrackFlowLayout *)flowLayout beginEditWithModel:(ECRBookrackModel *)model doneBlock:(void (^)())doneBlock {
    [self setNavRightItemsWithState:NO];
    self.editDoneBlock = doneBlock;
    if (model.groupId == 0) {// ÂçïÊú¨‰π¶
        // Â∞ÜËØ•Ê®°Âûã ÂàáÊç¢‰∏∫ÈÄâ‰∏≠Áä∂ÊÄÅ
        
        // Êõ¥Êç¢ÂØºËà™Ê†èÂè≥Ëæπ item
    }else{// Êñá‰ª∂Â§π
        // ‰∏çÊìç‰Ωú
    }
}

#pragma mark LXReorderableCollectionViewDataSource
- (void)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath didMoveToIndexPath:(NSIndexPath *)toIndexPath{
    // ÂÆåÊàêÁßªÂä®Êó∂ÊâßË°å
    
}

- (void)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath willMoveToIndexPath:(NSIndexPath *)toIndexPath{
    if ([collectionView isEqual:_mainView.bookrack]) {
        
        ECRBookrackModel *fromModel = _bookrackModels[fromIndexPath.item];
        [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
        [_bookrackModels insertObject:fromModel atIndex:toIndexPath.item];
    }else{
        ECRBookrackModel *fromModel = _floderView.bookModels[fromIndexPath.item];
        [_floderView.bookModels removeObjectAtIndex:fromIndexPath.item];
        [_floderView.bookModels insertObject:fromModel atIndex:toIndexPath.item];
    }
    
}
// lee
- (void)collectionView:(UICollectionView *)collectionView deleteItemAndModelAtIndexPath:(NSIndexPath *)fromIndexPath insertModel:(ECRBookrackModel *)model toIndexPath:(NSIndexPath *)toIndexPath{
    
    if (model == nil) {// Â¶ÇÊûúmodel‰∏∫nil, ÈÇ£‰πàtoIndexÁöÑÊ®°Âûã‰∏∫Êñá‰ª∂Â§πÁ±ªÂûã
        [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
    }else{
        if (fromIndexPath.item < toIndexPath.item) {// ‰ªéÂâçÂæÄÂêéÊ∑ªÂä†
                [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
                [_bookrackModels removeObjectAtIndex:(toIndexPath.item - 1)];
                [_bookrackModels insertObject:model atIndex:(toIndexPath.item - 1)];
        }else{// ‰ªéÂêéÂæÄÂâçÊ∑ªÂä†

            [_bookrackModels removeObjectAtIndex:fromIndexPath.item];
            [_bookrackModels removeObjectAtIndex:toIndexPath.item];
            [_bookrackModels insertObject:model atIndex:toIndexPath.item];
            NSLog(@"Êñá‰ª∂Â§πindex%ld",toIndexPath.item);
        }
    }
    
}

- (BOOL)collectionView:(UICollectionView *)collectionView itemAtIndexPath:(NSIndexPath *)fromIndexPath canMoveToIndexPath:(NSIndexPath *)toIndexPath{
    return YES;
}

- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{
    return YES;
}

// ÁÇπÂáªcell
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath{
    ECRBookrackModel *model = self.bookrackModels[indexPath.item];
    if (model.groupId == 0) {
        // ËØª‰π¶
        ECRBookReaderController *rvc = [[ECRBookReaderController alloc] init];
        rvc.viewControllerPushWay = ECRBaseControllerPushWayPush;
        [self.navigationController pushViewController:rvc animated:YES];
        
    }else{
        // ÊâìÂºÄÊñá‰ª∂Â§π
//        ECRBookFloderLayout *floderLayout = [[ECRBookFloderLayout alloc] init];
        _floderView = [[ECRFloderView alloc] initWithFrame:CGRectZero flowLayout:nil];
        _floderView.delegate = self;
        [self.view addSubview:_floderView];
        _floderView.fileName = model.name;
        _floderView.bookModels = model.books;
        _floderView.collectionView.dataSource = self;
        _floderView.collectionView.delegate = self;
        [_floderView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.equalTo(self.view);
        }];
    }
}

#pragma mark - UICollectionViewDataSource
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    if ([collectionView isEqual:_mainView.bookrack]) {
        return _bookrackModels.count;
    }
    if ([collectionView isEqual:_floderView.collectionView]) {
        return _floderView.bookModels.count;
    }
    return 0;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    // ÂæÖ‰ºòÂåñ
    if ([collectionView isEqual:_mainView.bookrack]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];;
        cell.inx  = indexPath;
        if (self.bookrackModels.count == 0) {
        }else{
            model = self.bookrackModels[indexPath.item];
            cell.model = model;
        }
        return cell;
    }
    if ([collectionView isEqual:_floderView.collectionView]) {
        ECRBookrackModel *model;
        ECRBookrackCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ECRBookrackcell forIndexPath:indexPath];;
        cell.inx  = indexPath;
        if (self.floderView.bookModels.count == 0) {
        }else{
            model = self.floderView.bookModels[indexPath.item];
            cell.model = model;
        }
        return cell;
    }
    return nil;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupUI];
    [self loadNewData];
    
}

- (void)loadNewData{
    // TEST - CODE FOR DATA
    NSString *testURL0 = @"https://images-cn.ssl-images-amazon.com/images/I/51VNBGrPxVL._SX353_BO1,204,203,200_.jpg";
    NSString *testURL1 = @"http://img3x8.ddimg.cn/97/34/25087588-1_l_5.jpg";
    NSInteger count = 9;//arc4random_uniform(10) + 6;
    NSMutableArray *arrM = [NSMutableArray arrayWithCapacity:10];
    for (NSInteger i = 0; i < count; ++i) {
        ECRBookrackModel *model = [[ECRBookrackModel alloc] init];
        model.name = [NSString stringWithFormat:@"Ëê•ÈîÄ_%ld",i];
        model.groupId = 0;
        model.bookPic = testURL0;
//        if (i == 0 || i == 5) {
//            NSMutableArray *arr2 = [NSMutableArray arrayWithCapacity:10];
//            for (NSInteger i = 0; i < 3; ++i) {
//                ECRBookrackModel *modelBook = [[ECRBookrackModel alloc] init];
//                modelBook.bookPic = testURL1;
//                [arr2 addObject:modelBook];
//            }
//            model.books = arr2;
//            model.groupId = 1;
//            model.name = [NSString stringWithFormat:@"Êñá‰ª∂Â§π%ld",i];
//        }
        [arrM addObject:model];
    }
    
    self.bookrackModels = arrM;
    [self.mainView.bookrack reloadData];
    
}



- (void)setupUI{
    ECRBookrackFlowLayout *brLayout = [[ECRBookrackFlowLayout alloc] init];
    brLayout.flssDelegate =  self;
    _mainView          = [[ECRBookrackView alloc]
                          initWithFrame:self.view.bounds flowLayout:brLayout];
    _mainView.bookrack.dataSource = self;
    _mainView.bookrack.delegate = self;
    self.view          = _mainView;
    
    // ËÆæÁΩÆÂØºËà™Ê†èÂè≥ÁÆ≠Â§¥
    [self setNavRightItemsWithState:YES];
}
- (void)setNavRightItemsWithState:(BOOL)normal{
    if (normal) {
        UIBarButtonItem *menuItem = [[UIBarButtonItem alloc] initWithTitle:@"üòØ" style:UIBarButtonItemStylePlain target:self action:@selector(menuDropDown)];
        UIBarButtonItem *test = [[UIBarButtonItem alloc] initWithTitle:@"üòà" style:UIBarButtonItemStylePlain target:self action:@selector(test)];
        
        self.navigationItem.rightBarButtonItems = @[menuItem,test];
    }else{
        if (self.navigationItem.rightBarButtonItems.count == 2) {
            self.navigationItem.rightBarButtonItems = nil;
        UIBarButtonItem *doneItem = [[UIBarButtonItem alloc] initWithTitle:@"\ue018" style:UIBarButtonItemStylePlain target:self action:@selector(editDone)];
        self.navigationItem.rightBarButtonItem = doneItem;
        }
    }
}
- (void)menuDropDown{// Â±ïÂºÄ‰∏ãÊãâËèúÂçï

}
- (void)test{
    // ÂæÖÂÆö
}
- (void)editDone{
    [self setNavRightItemsWithState:YES];
    // ÂõûË∞É,ÂëäËØâflow layout ÁªìÊùü ÁºñËæë
    if (self.editDoneBlock) {
        self.editDoneBlock();
    }
}


- (void)createNavLeftBackItem{
    
}


@end
