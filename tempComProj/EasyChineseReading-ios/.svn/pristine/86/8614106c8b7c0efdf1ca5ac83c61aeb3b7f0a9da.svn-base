//
//  RegisterDetailVC.m
//  EasyChineseReading-ios
//
//  Created by 赵春阳 on 2017/9/8.
//  Copyright © 2017年 lee. All rights reserved.
//

#import "RegisterDetailVC.h"

#import "LTextFieldTableViewCell.h"
#import "LVerifyTableViewCell.h"
#import "RButtonTableViewCell.h"

#import "UserInfoAddressVC.h"
#import "RegisterSuccessVC.h"

@interface RegisterDetailVC ()<UITableViewDelegate, UITableViewDataSource, LTextFieldTableViewCellDelegate, RButtonTableViewCellDelegate>

@property (strong, nonatomic) UITableView *tableView;
@property (strong, nonatomic) NSArray *arrViewConfiguration;   // 界面配置

/* 键盘高度 */
@property (assign, nonatomic) CGFloat keyBoardHeight;
/* table 偏移量 */
@property (assign, nonatomic) CGFloat tableOffset;
/* 选中的cell */
@property (strong, nonatomic) NSIndexPath *selectedIndexPath;

/** 昵称 */
@property (strong, nonatomic) NSString *name;
/** 学校 */
@property (strong, nonatomic) NSString *school;
/** 手机号 */
@property (strong, nonatomic) NSString *phone;
/** email */
@property (strong, nonatomic) NSString *email;
/** 密码 */
@property (strong, nonatomic) NSString *password;
/** 重复密码 */
@property (nonatomic, strong) NSString *rePassword;
/** 国家 */
@property (strong, nonatomic) NSString *country;
/** 验证码 */
@property (nonatomic, strong) NSString *code;
/** 账号 */
@property (nonatomic, strong) NSString *user;
/** 同意注册条款 */
@property (nonatomic, assign) BOOL agree;

@end

static CGFloat const kHeaderHeight = 10.f;  // tableViewHeader 高度（空白高度）

@implementation RegisterDetailVC

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    _agree = YES;
    [self configRegisterView];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self addNotification];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -
#pragma mark 配置登录界面

- (void)configRegisterView
{
    [self configTableView];
}

- (void)addNotification
{
    // 监听 键盘出现或改变
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillShow:)
                                                 name:UIKeyboardWillShowNotification
                                               object:nil];
    // 监听 键盘退出
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillHide:)
                                                 name:UIKeyboardWillHideNotification
                                               object:nil];
}

- (void)configTableView
{
    _tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, Screen_Width, self.view.height - cHeaderHeight_44 - cHeaderHeight_64) style:UITableViewStyleGrouped];
    _tableView.backgroundColor = [UIColor whiteColor];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    _tableView.rowHeight = UITableViewAutomaticDimension;
    _tableView.estimatedRowHeight = 100;
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    
    [self.view addSubview:_tableView];
    
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LTextFieldTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LTextFieldTableViewCell class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([LVerifyTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([LVerifyTableViewCell class])];
    [_tableView registerNib:[UINib nibWithNibName:NSStringFromClass([RButtonTableViewCell class]) bundle:nil] forCellReuseIdentifier:NSStringFromClass([RButtonTableViewCell class])];
}

#pragma mark -
#pragma mark UITableViewDataSource

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.arrViewConfiguration.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:_arrViewConfiguration[indexPath.row][@"identify"]];
    cell.data = _arrViewConfiguration[indexPath.row];
    if ([cell isKindOfClass:[LTextFieldTableViewCell class]]) {
        LTextFieldTableViewCell *txtfCell = (LTextFieldTableViewCell *)cell;
        txtfCell.delegate = self;
    }
    else if ([cell isKindOfClass:[RButtonTableViewCell class]]) {
        RButtonTableViewCell *btnCell = (RButtonTableViewCell *)cell;
        btnCell.delegate = self;
    }
    
    [self configTextWithCell:cell];
    return cell;
}

#pragma mark -
#pragma mark UITableViewDelegate

// 空白高度
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    UIView *header = [UIView new];
    return header;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return kHeaderHeight;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    // 如果分配的数据有 showSelected ，那么点击这个cell 跳转选择国家
    if (_arrViewConfiguration[indexPath.row][@"showSelected"]) {
        [self selectedCountry];
    }
}

#pragma mark -
#pragma mark UIScrollViewDelegate

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    UITableViewCell *cell = [_tableView cellForRowAtIndexPath:_selectedIndexPath];
    [cell resignAllFirstResponder];
}

#pragma mark -
#pragma mark LTextFieldTableViewCellDelegate

- (void)selectedCountry
{
    UserInfoAddressVC *addressVC = [[UserInfoAddressVC alloc] init];
    [self.navigationController pushViewController:addressVC animated:YES];
}

#pragma mark - RButtonTableViewCellDelegate

/**
 立刻注册
 */
- (void)registerNow
{
    [self checkRegisterInfomation];
}

/**
 同意协议
 */
- (void)allowProtocolWithCell:(RButtonTableViewCell *)cell
{
    _agree = !_agree;
    cell.imgAllow.image = [UIImage imageNamed:[NSString stringWithFormat:@"%@", _agree ? @"login_remberPassword" : @"login_unRemberPassword"]];
}

#pragma mark - 注册流程

// ------------------------------------------------------------
// 	普通用户							机构用户
// |						      |
// |--检查注册信息				      |--检查注册信息
// |						      |
// |--验证账号唯一性（手机或邮箱）	  |--验证账号唯一性（手机与邮箱，验证两次）
// |  (返回0,1 0-可以使用的账号)	  |  (返回0,1 0-可以使用的账号)
// |                              |
// |--发送验证码                    |--发送验证码
// |                              |
// |--验证验证码                    |--验证验证码
// |						      |
// |--提交注册信息				      |--提交注册信息
// |				       		  |
// |--登录（获取用户信息）			  |--登录（获取用户信息）
// |							  |
// |--注册成功					  |--注册成功
// |						      |
// -------------------------------------------------------------

/**
 检查注册信息
 */
- (void)checkRegisterInfomation
{
    // 判断账号类型（手机 邮箱）
    NSString *accountType = @"";
    if (_user.length > 0) {
        if ([_user isEmail]) {
            accountType = [NSString stringWithFormat:@"%lu", (unsigned long)ENUM_VerityTypeEmail];
            _email = _user;
            _phone = @"";
        }
        else if ([_user isPhone]) {
            accountType = [NSString stringWithFormat:@"%lu", (unsigned long)ENUM_VerityTypePhone];
            _phone = _user;
            _email = @"";
        }
        else {
            [self presentFailureTips:@"账号类型错误，账号为手机/邮箱号"];
            return;
        }
    }
    if (_userType == ENUM_UserTypeOrganization) {
        // 手机号检查
        if ([NSString isEmpty:_phone]) {
            [self presentFailureTips:@"手机号不能为空"];
            return;
        }
        if (![_phone isPhone]) {
            [self presentFailureTips:@"手机号格式不对，请重新输入"];
            return;
        }
        // 邮箱检查
        if ([NSString isEmpty:_email]) {
            [self presentFailureTips:@"邮箱号不能为空"];
            return;
        }
        if (![_email isEmail]) {
            [self presentFailureTips:@"邮箱号格式不对，请重新输入"];
            return;
        }
        // 学校检查
        if ([NSString isEmpty:_school]) {
            [self presentFailureTips:@"请输入学校"];
            return;
        }
        // 国家检查
        if ([NSString isEmpty:_country]) {
            [self presentFailureTips:@"请选择国家"];
            return;
        }
        // 申请人姓名检查
        if ([NSString isEmpty:_name]) {
            [self presentFailureTips:@"申请人姓名不能为空"];
            return;
        }
    }
    else {
        if ([NSString isEmpty:_user]) {
            [self presentFailureTips:@"账号不能为空"];
            return;
        }
    }
    
    // 密码检查
    if ([NSString isEmpty:_password]) {
        [self presentFailureTips:@"请输入密码"];
        return;
    }
    if ([NSString isEmpty:_rePassword]) {
        [self presentFailureTips:@"确认密码不能为空"];
        return;
    }
    if (_password.length > cMaxPasswordLength || _password.length < cMinPasswordLength) {
        [self presentFailureTips:@"密码长度为6-16"];
        return;
    }
    if (![_password isEqualToString:_rePassword]) {
        [self presentFailureTips:@"两次输入的密码不一样，请确认后重新输入"];
        return;
    }
    // 注册条款检查
    if (!_agree) {
        [self presentFailureTips:@"您并未同意注册条款，将不能注册使用此APP"];
        return;
    }

    [self verifyAccountSingleWithAccountType:accountType];
}

/**
 验证账号的唯一性

 @param accountType 账号类型（手机 邮箱）
 */
- (void)verifyAccountSingleWithAccountType:(NSString *)accountType
{
    if (_userType == ENUM_UserTypePerson) {
        [self personVerifySingleWithAccountType:accountType];
    }
    else {
        [self organizationVerifySingleWithPhone];
    }
}

/**
 普通用户验证账号唯一性

 @param accountType 账号类型（手机 邮箱）
 */
- (void)personVerifySingleWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] verifyAccountSingleWithUserName:_user
                                                         userType:accountType
                                                       completion:^(id object, ErrorModel *error) {
                                                           if (error) {
                                                               [self presentFailureTips:error.message];
                                                           }
                                                           else {
                                                               if ([object isEqualToString:@"0"]) { // 数据中没有该账号 可以使用
                                                                   [self registerRequestWithAccountType:accountType];
                                                               }
                                                               else {
                                                                   [self presentFailureTips:@"账号已存在，请更换账号后重新注册，或直接返回上一界面登录"];
                                                               }
                                                           }
                                                       }];
}

/**
 机构用户验证手机的唯一性
 */
- (void)organizationVerifySingleWithPhone
{
    [[UserRequest sharedInstance] verifyAccountSingleWithUserName:_phone
                                                         userType:[NSString stringWithFormat:@"%ld", ENUM_VerityTypePhone]
                                                       completion:^(id object, ErrorModel *error) {
                                                           if (error) {
                                                               [self presentFailureTips:error.message];
                                                           }
                                                           else {
                                                               if ([object isEqualToString:@"0"]) { // 数据中没有该账号 可以使用
                                                                   [self organizationVerifySingleWithEmail];
                                                               }
                                                               else {
                                                                   [self presentFailureTips:@"账号已存在，请更换账号后重新注册，或直接返回上一界面登录"];
                                                               }
                                                           }
                                                           
                                                       }];
}

/**
 机构用户验证邮箱的唯一性
 */
- (void)organizationVerifySingleWithEmail
{
    [[UserRequest sharedInstance] verifyAccountSingleWithUserName:_email
                                                         userType:[NSString stringWithFormat:@"%ld", ENUM_VerityTypeEmail]
                                                       completion:^(id object, ErrorModel *error) {
                                                           if (error) {
                                                               [self presentFailureTips:error.message];
                                                           }
                                                           else {
                                                               if ([object isEqualToString:@"0"]) { // 数据中没有该账号 可以使用
                                                                   [self registerRequestWithAccountType:@""];
                                                               }
                                                               else {
                                                                   [self presentFailureTips:@"邮箱已存在，请更换账号后重新注册，或直接返回上一界面登录"];
                                                               }
                                                           }
                                                       }];
}

/**
 发送邮箱验证码
 
 @param email 邮箱号
 */
- (void)sendEmailCodeWithEmail:(NSString *)email
{
    [[UserRequest sharedInstance] sendEmailCodeWithEmail:email completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
    }];
}

/**
 发送手机验证码
 
 @param phone 手机号
 */
- (void)sendPhoneCodeWithPhone:(NSString *)phone
{
    [[UserRequest sharedInstance] sendPhoneCodeWithPhone:phone completion:^(id object, ErrorModel *error) {
        if (error) {
            [self presentFailureTips:error.message];
        }
    }];
}

/**
 验证验证码
 */
- (void)checkVerifyCodeWithAccountType:(NSString *)accountType
{
//    [[UserRequest sharedInstance] verityCodeWithType:[NSString stringWithFormat:@"%ld", _verifyType]
//                                              verifi:_verifyCode
//                                          completion:^(id object, ErrorModel *error) {
//                                              if (error) {
//                                                  [self presentFailureTips:error.message];
//                                              }
//                                              else {
//                                                  [self registerRequestWithAccountType:<#(NSString *)#>];
//                                              }
//                                          }];
}

/**
 提交注册信息

 @param accountType 账号类型（手机 邮箱）
 */
- (void)registerRequestWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] registerUserWithType:[NSString stringWithFormat:@"%ld", (long)_userType]
                                              userType:accountType
                                              password:_password
                                                school:_school
                                               country:_country
                                                  name:_name
                                                 email:_email
                                                 phone:_phone
                                            completion:^(id object, ErrorModel *error) {
                                                if (error) {
                                                    [self presentFailureTips:error.message];
                                                }
                                                else {
                                                    if ([object isEqualToString:@"SUCCESS"]) {
                                                        if (_userType == ENUM_UserTypePerson) {
                                                            [self loginWithAccountType:accountType];
                                                        }
                                                        else {
                                                            [self presentSuccessTips:@"注册成功，请等待审核"];
                                                            [self.navigationController popToRootViewControllerAnimated:YES];
                                                        }
                                                    }
                                                    else {
                                                        [self presentFailureTips:@"注册失败，请重试"];
                                                    }
                                                }
                                            }];
}

/**
 登录
 
 @param accountType 账号类型（手机 邮箱）
 */
- (void)loginWithAccountType:(NSString *)accountType
{
    [[UserRequest sharedInstance] loginWithType:[NSString stringWithFormat:@"%ld", (long)ENUM_LoginTypePassword]
                                       userType:accountType
                                           user:_user
                                       password:_password
                                         userId:@""
                                          token:@""
                                     completion:^(id object, ErrorModel *error) {
                                         if (error) {
                                             [self presentFailureTips:error.message];
                                         }
                                         else {
                                             if ([object isKindOfClass:[NSDictionary class]]) {
                                                 UserModel *user = [UserModel mj_objectWithKeyValues:object[@"user"]];
                                                 [UserRequest sharedInstance].user = user;
                                                 [UserRequest sharedInstance].token = object[@"token"];
                                                 [[UserRequest sharedInstance] saveCache];
                                                 [self registerSuccess];                                                 
                                             }
                                         }
                                     }];
}

/**
 注册成功
 */
- (void)registerSuccess
{
    RegisterSuccessVC *rSuccessVC = [RegisterSuccessVC new];
    [self.navigationController pushViewController:rSuccessVC animated:YES];
}

#pragma mark - 获取 注册表 textfield 的值

- (void)configTextWithCell:(UITableViewCell *)cell
{
    LTextFieldTableViewCell *tCell = (LTextFieldTableViewCell *)cell;
    LVerifyTableViewCell    *vCell = (LVerifyTableViewCell *)cell;
    if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LTextFieldTableViewCell class])]) {
        [tCell.txtfContent addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
    }
    else if ([cell.reuseIdentifier isEqualToString:NSStringFromClass([LVerifyTableViewCell class])]) {
        [vCell.txtfContent addTarget:self action:@selector(textFieldWithText:) forControlEvents:UIControlEventEditingChanged];
    }
}

- (void)textFieldWithText:(UITextField *)textField
{
    switch (textField.tag) {
        case 10000:
            _user = textField.text;
            break;
        case 10001:
        case 20005:
            _password = textField.text;
            break;
        case 10002:
        case 20006:
            _rePassword = textField.text;
            break;
        case 10003:
        case 20007:
            _code = textField.text;
            break;
        case 20000:
            _phone = textField.text;
            break;
        case 20001:
            _school = textField.text;
            break;
        case 20002:
            _country = textField.text;
            break;
        case 20003:
            _name = textField.text;
            break;
        case 20004:
            _email = textField.text;
            break;
        default:
            break;
    }
}

#pragma mark -
#pragma mark 监听键盘

// 键盘出现或改变
- (void)keyboardWillShow:(NSNotification *)notification
{
    //获取键盘的高度
    NSDictionary *userInfo = [notification userInfo];
    NSValue *aValue = [userInfo objectForKey:UIKeyboardFrameEndUserInfoKey];
    CGRect keyboardRect = [aValue CGRectValue];
    _keyBoardHeight = keyboardRect.size.height;
    
    UITableViewCell *cell = [_tableView cellForRowAtIndexPath:_selectedIndexPath];
    if (cell.y + cell.height > self.view.height - _keyBoardHeight) {
        _tableOffset = (cell.y + cell.height) - self.view.height + _keyBoardHeight;
        NSLog(@"offset %f", _tableOffset);
//        [_tableView setOffset:CGPointMake(-_tableView.width, -_tableOffset)];
        _tableView.frame = CGRectMake(0, -_tableOffset, Screen_Width, self.view.height);
    }
}

// 键盘退出
- (void)keyboardWillHide:(NSNotification *)notification
{
    _tableView.frame = CGRectMake(0, 0, Screen_Width, self.view.height);
}

#pragma mark -
#pragma mark 属性
#pragma mark 界面配置

- (NSArray *)arrViewConfiguration
{
    if (_arrViewConfiguration == nil) {
        if (_userType == ENUM_UserTypePerson || _userType == ENUM_UserTypeStudent) {
            _arrViewConfiguration = @[@{@"index": @"10000", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入邮箱/手机号", @"icon": @"login7"},
                                      @{@"index": @"10001", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入密码", @"icon": @"login5", @"password": @"1"},
                                      @{@"index": @"10002", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请确认密码", @"icon": @"login5", @"password": @"1"},
                                      @{@"index": @"10003", @"identify": NSStringFromClass([LVerifyTableViewCell class]),    @"placeHolder": @"输入验证码", @"icon": @"login18"},
                                      @{@"index": @"10004", @"identify": NSStringFromClass([RButtonTableViewCell class]),    @"agree": @(_agree)},];
        }
        else {
            _arrViewConfiguration = @[@{@"index": @"20000", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入手机号", @"icon": @"login7"},
                                      @{@"index": @"20001", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入学校/机构名称", @"icon": @"login16"},
                                      @{@"index": @"20002", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请选择所在国家", @"icon": @"login3", @"showSelected": @(1)},
                                      @{@"index": @"20003", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入申请人姓名", @"icon": @"login4"},
                                      @{@"index": @"20004", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入联系邮箱", @"icon": @"login17"},
                                      @{@"index": @"20005", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请输入密码", @"icon": @"login5", @"password": @"1"},
                                      @{@"index": @"20006", @"identify": NSStringFromClass([LTextFieldTableViewCell class]), @"placeHolder": @"请确认密码", @"icon": @"login5", @"password": @"1"},
                                      @{@"index": @"20007", @"identify": NSStringFromClass([LVerifyTableViewCell class]),    @"placeHolder": @"输入验证码", @"icon": @"login18"},
                                      @{@"index": @"20008", @"identify": NSStringFromClass([RButtonTableViewCell class]),    @"agree": @(_agree)},];
        }
    }
    return _arrViewConfiguration;
}

@end
